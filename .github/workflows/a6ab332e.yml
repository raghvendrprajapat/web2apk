# Enhanced Web2APK Android Build Workflow
# Compliant with Google Play Store 2025 requirements and GitHub Actions best practices

name: 'Build Android (Signed APK & AAB) - Enhanced'

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name (e.g., My Awesome App)"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      PLUGINS:
        description: "Select which Capacitor plugins to install"
        type: choice
        required: true
        default: 'none'
        options:
        - none
        - camera
        - push-notifications
        - location
        - camera_and_push
        - all
      VERSION_NAME:
        description: "App Version Name (e.g., 1.0.1)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Unique Version Code (integer, e.g., 1)"
        required: true
        default: "1"
      TARGET_SDK_VERSION:
        description: "Target SDK Version (35 for Android 15 - Required for Play Store 2025)"
        required: true
        default: "35"
      COMPILE_SDK_VERSION:
        description: "Compile SDK Version (35 recommended)"
        required: true
        default: "35"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false
        default: ""

# Workflow-level configurations for security and performance
permissions:
  contents: read
  actions: read

concurrency:
  group: android-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-inputs:
    name: "Validate Build Inputs"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      app_name: ${{ steps.validation.outputs.app_name }}
      app_id: ${{ steps.validation.outputs.app_id }}
      web_url: ${{ steps.validation.outputs.web_url }}
      plugins: ${{ steps.validation.outputs.plugins }}
      version_name: ${{ steps.validation.outputs.version_name }}
      version_code: ${{ steps.validation.outputs.version_code }}
      target_sdk: ${{ steps.validation.outputs.target_sdk }}
      compile_sdk: ${{ steps.validation.outputs.compile_sdk }}
      
    steps:
    - name: Validate Build Parameters
      id: validation
      shell: bash
      run: |
        # Validate APP_NAME
        APP_NAME="${{ github.event.inputs.APP_NAME }}"
        if [[ -z "$APP_NAME" || ${#APP_NAME} -gt 50 ]]; then
          echo "❌ App name is required and must be ≤ 50 characters"
          exit 1
        fi
        
        # Validate APP_ID (package name format)
        APP_ID="${{ github.event.inputs.APP_ID }}"
        if [[ ! "$APP_ID" =~ ^[a-z][a-z0-9_]*(\.[a-z][a-z0-9_]*)+$ ]]; then
          echo "❌ Invalid package ID format. Use com.example.app format"
          exit 1
        fi
        
        # Validate WEB_URL
        WEB_URL="${{ github.event.inputs.WEB_URL }}"
        if [[ ! "$WEB_URL" =~ ^https?:// ]]; then
          echo "❌ Web URL must start with http:// or https://"
          exit 1
        fi
        
        # Validate VERSION_CODE (must be integer)
        VERSION_CODE="${{ github.event.inputs.VERSION_CODE }}"
        if [[ ! "$VERSION_CODE" =~ ^[0-9]+$ ]]; then
          echo "❌ Version code must be a positive integer"
          exit 1
        fi
        
        # Validate SDK versions
        TARGET_SDK="${{ github.event.inputs.TARGET_SDK_VERSION }}"
        COMPILE_SDK="${{ github.event.inputs.COMPILE_SDK_VERSION }}"
        
        if [[ $TARGET_SDK -lt 35 ]]; then
          echo "⚠️ Warning: Google Play Store requires target SDK 35+ for new apps (2025 requirement)"
        fi
        
        if [[ $COMPILE_SDK -lt $TARGET_SDK ]]; then
          echo "❌ Compile SDK must be >= Target SDK"
          exit 1
        fi
        
        echo "✅ All inputs validated successfully"
        
        # Set outputs
        echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
        echo "web_url=$WEB_URL" >> $GITHUB_OUTPUT
        echo "plugins=${{ github.event.inputs.PLUGINS }}" >> $GITHUB_OUTPUT
        echo "version_name=${{ github.event.inputs.VERSION_NAME }}" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "target_sdk=$TARGET_SDK" >> $GITHUB_OUTPUT
        echo "compile_sdk=$COMPILE_SDK" >> $GITHUB_OUTPUT

  build:
    name: "Build Android App"
    runs-on: ubuntu-latest
    needs: validate-inputs
    timeout-minutes: 45  # Explicit timeout to prevent runaway builds
    
    env:
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      MAKE_WEBHOOK_URL: ${{ secrets.MAKE_WEBHOOK_URL }}
      JAVA_TOOL_OPTIONS: -Xmx4g  # Increase heap size for large builds

    steps:    
    - name: Checkout Repository    
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Setup Java 21    
      uses: actions/setup-java@v4    
      with:    
        distribution: 'temurin'    
        java-version: '21'
        check-latest: true  # Ensure latest patch version
      timeout-minutes: 5

    - name: Setup Node.js 20 with Caching
      uses: actions/setup-node@v4    
      with:    
        node-version: '20'
        cache: 'npm'  # Enable npm caching for faster builds
        cache-dependency-path: '**/package-lock.json'
      timeout-minutes: 5

    - name: Setup Android SDK with NDK
      uses: android-actions/setup-android@v3
      timeout-minutes: 10

    - name: Accept Android SDK Licenses
      shell: bash
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      timeout-minutes: 2

    # Enhanced Capacitor Dependencies Installation with Error Handling
    - name: Install Capacitor Dependencies and Plugins    
      shell: bash    
      timeout-minutes: 10
      run: |    
        set -e  # Exit on any error
        
        # Create package.json if it doesn't exist
        if [ ! -f package.json ]; then    
          cat > package.json <<'JSON'    
          {    
            "name": "web2apk-app",    
            "version": "${{ needs.validate-inputs.outputs.version_name }}",    
            "private": true,
            "engines": {
              "node": ">=18.0.0",
              "npm": ">=8.0.0"
            }
          }    
JSON    
        fi    
        
        # Install Capacitor CLI globally with version pinning for stability
        echo "📦 Installing Capacitor CLI..."
        npm install -g @capacitor/cli@latest
        
        # Verify installation
        if ! command -v cap &> /dev/null; then
          echo "❌ Capacitor CLI installation failed"
          exit 1
        fi
        
        echo "✅ Capacitor CLI installed: $(cap --version)"
        
        # Install core Capacitor packages
        echo "📦 Installing Capacitor core packages..."
        npm install @capacitor/core@latest @capacitor/android@latest --save-exact    
              
        # Install selected plugins based on user choice
        PLUGINS_TO_INSTALL=""    
        CHOICE="${{ needs.validate-inputs.outputs.plugins }}"    

        echo "🔌 Installing plugins: $CHOICE"
        
        case "$CHOICE" in
          "camera")
            PLUGINS_TO_INSTALL="@capacitor/camera"
            ;;
          "push-notifications")
            PLUGINS_TO_INSTALL="@capacitor/push-notifications"
            ;;
          "location")
            PLUGINS_TO_INSTALL="@capacitor/geolocation"
            ;;
          "camera_and_push")
            PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications"
            ;;
          "all")
            PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications @capacitor/geolocation"
            ;;
          "none")
            echo "ℹ️ No additional plugins selected"
            ;;
          *)
            echo "❌ Unknown plugin choice: $CHOICE"
            exit 1
            ;;
        esac

        if [ -n "$PLUGINS_TO_INSTALL" ]; then    
          echo "📦 Installing selected plugins: $PLUGINS_TO_INSTALL"    
          npm install $PLUGINS_TO_INSTALL --save-exact
          if [ $? -ne 0 ]; then
            echo "❌ Plugin installation failed"
            exit 1
          fi
          echo "✅ Plugins installed successfully"
        fi    
              
        # Create www directory with enhanced index.html
        mkdir -p www    
        cat > www/index.html <<'HTML'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
  <meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https: 'unsafe-inline' 'unsafe-eval';">
  <title>${{ needs.validate-inputs.outputs.app_name }}</title>
</head>
<body>
  <div id="app-loading">Loading...</div>
</body>
</html>
HTML

    # Enhanced Capacitor Configuration with Play Store Compliance
    - name: Generate/Update Capacitor Config    
      shell: bash    
      timeout-minutes: 5
      run: |    
        set -e
        
        echo "🔧 Initializing Capacitor project..."
        npx cap init \    
          "${{ needs.validate-inputs.outputs.app_name }}" \    
          "${{ needs.validate-inputs.outputs.app_id }}" \    
          --web-dir "www"
          
        echo "🌐 Configuring server settings..."
        npx cap config set server.url "${{ needs.validate-inputs.outputs.web_url }}"    
        npx cap config set server.androidScheme "https"    
        npx cap config set android.allowMixedContent true
        
        # Add enhanced security and performance settings
        npx cap config set android.webContentsDebuggingEnabled false
        npx cap config set android.appendUserAgent "Web2APK/1.0"
        
        echo "✅ Capacitor configuration completed"

    - name: Add Android Platform & Sync    
      timeout-minutes: 10
      run: |  
        set -e
        
        echo "📱 Adding Android platform..."  
        npx cap add android
        if [ $? -ne 0 ]; then
          echo "❌ Failed to add Android platform"
          exit 1
        fi
        
        echo "🔄 Syncing Capacitor..."
        npx cap sync android
        if [ $? -ne 0 ]; then
          echo "❌ Failed to sync Capacitor"
          exit 1
        fi
        
        echo "✅ Android platform added and synced successfully"
          
    # Enhanced Gradle Configuration with Play Store Requirements
    - name: Configure Android Build Settings
      shell: bash    
      timeout-minutes: 5
      run: |    
        set -e
        
        VERSION_NAME="${{ needs.validate-inputs.outputs.version_name }}"    
        VERSION_CODE="${{ needs.validate-inputs.outputs.version_code }}"
        TARGET_SDK="${{ needs.validate-inputs.outputs.target_sdk }}"
        COMPILE_SDK="${{ needs.validate-inputs.outputs.compile_sdk }}"
        
        GRADLE_FILE="android/app/build.gradle"
        
        echo "⚙️ Configuring build.gradle with Play Store requirements..."
        
        # Update version information
        sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" $GRADLE_FILE    
        sed -i "s/versionCode .*/versionCode $VERSION_CODE/" $GRADLE_FILE
        
        # Update SDK versions for Play Store compliance
        sed -i "s/compileSdkVersion .*/compileSdkVersion $COMPILE_SDK/" $GRADLE_FILE
        sed -i "s/targetSdkVersion .*/targetSdkVersion $TARGET_SDK/" $GRADLE_FILE
        
        # Ensure minSdkVersion is appropriate (API 24+ recommended for modern features)
        sed -i "s/minSdkVersion .*/minSdkVersion 24/" $GRADLE_FILE
        
        # Add build optimizations
        if ! grep -q "android.enableR8.fullMode" android/gradle.properties; then
          echo "android.enableR8.fullMode=true" >> android/gradle.properties
        fi
        
        if ! grep -q "android.bundle.enableUncompressedNativeLibs" android/gradle.properties; then
          echo "android.bundle.enableUncompressedNativeLibs=false" >> android/gradle.properties
        fi
        
        echo "✅ Android build configuration updated for Play Store compliance"
        
        # Display final configuration for verification
        echo "📋 Build Configuration Summary:"
        echo "  App Name: ${{ needs.validate-inputs.outputs.app_name }}"
        echo "  Package ID: ${{ needs.validate-inputs.outputs.app_id }}"
        echo "  Version: $VERSION_NAME ($VERSION_CODE)"
        echo "  Target SDK: $TARGET_SDK"
        echo "  Compile SDK: $COMPILE_SDK"

    # Enhanced Keystore Handling with Security
    - name: Decode and Validate Keystore    
      shell: bash    
      timeout-minutes: 2
      run: |    
        set -e
        
        if [[ -z "$KEYSTORE_BASE64" ]]; then
          echo "❌ KEYSTORE_BASE64 secret is not set"
          exit 1
        fi
        
        if [[ -z "$KEYSTORE_PASSWORD" ]]; then
          echo "❌ KEYSTORE_PASSWORD secret is not set"
          exit 1
        fi
        
        if [[ -z "$KEY_ALIAS" ]]; then
          echo "❌ KEY_ALIAS secret is not set"
          exit 1
        fi
        
        if [[ -z "$KEY_PASSWORD" ]]; then
          echo "❌ KEY_PASSWORD secret is not set"
          exit 1
        fi
        
        echo "🔐 Decoding keystore..."
        echo "$KEYSTORE_BASE64" | base64 -d > android/release-key.jks
        
        if [[ ! -f android/release-key.jks ]]; then
          echo "❌ Failed to create keystore file"
          exit 1
        fi
        
        # Validate keystore file integrity
        if ! keytool -list -keystore android/release-key.jks -storepass "$KEYSTORE_PASSWORD" -alias "$KEY_ALIAS" >/dev/null 2>&1; then
          echo "❌ Keystore validation failed - check your secrets"
          exit 1
        fi
        
        echo "✅ Keystore decoded and validated successfully"

    # Enhanced Build Process with Better Error Handling
    - name: Build Signed App Bundle (AAB) and APK    
      working-directory: android    
      shell: bash    
      timeout-minutes: 25  # Increased timeout for large builds
      run: |    
        set -e
        
        echo "🚀 Starting Android build process..."
        
        # Make gradlew executable
        chmod +x ./gradlew    
        
        # Clean previous builds
        echo "🧹 Cleaning previous builds..."
        ./gradlew clean
        
        # Build App Bundle (AAB) - Primary format for Play Store
        echo "📦 Building App Bundle (AAB)..."
        ./gradlew bundleRelease \    
          -Pandroid.injected.signing.store.file=$PWD/release-key.jks \    
          -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \    
          -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \    
          -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
          --stacktrace \
          --info
        
        if [[ ! -f app/build/outputs/bundle/release/*.aab ]]; then
          echo "❌ AAB build failed - no output file found"
          exit 1
        fi
        
        # Build APK for testing
        echo "📱 Building APK..."
        ./gradlew assembleRelease \    
          -Pandroid.injected.signing.store.file=$PWD/release-key.jks \    
          -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \    
          -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \    
          -Pandroid.injected.signing.key.password="$KEY_PASSWORD" \
          --stacktrace \
          --info
          
        if [[ ! -f app/build/outputs/apk/release/*.apk ]]; then
          echo "❌ APK build failed - no output file found"
          exit 1
        fi
        
        echo "✅ Build completed successfully"
        
        # Display build artifacts info
        echo "📊 Build Artifacts Summary:"
        ls -la app/build/outputs/bundle/release/
        ls -la app/build/outputs/apk/release/
        
        # Check AAB size (Play Store has 4GB limit)
        AAB_SIZE=$(du -h app/build/outputs/bundle/release/*.aab | cut -f1)
        echo "📏 AAB Size: $AAB_SIZE"

    # Secure Cleanup
    - name: Cleanup Sensitive Files
      if: always()
      shell: bash
      run: |
        echo "🧹 Cleaning up sensitive files..."
        rm -f android/release-key.jks
        rm -f android/app/release-key.jks
        echo "✅ Cleanup completed"

    # Enhanced Artifact Upload with Better Organization
    - name: Upload AAB (Play Store Ready)    
      uses: actions/upload-artifact@v4    
      with:    
        name: "app-release-aab-v${{ needs.validate-inputs.outputs.version_name }}-${{ needs.validate-inputs.outputs.version_code }}"
        path: android/app/build/outputs/bundle/release/*.aab    
        if-no-files-found: error    
        retention-days: 30  # Extended retention for Play Store submissions
        compression-level: 6

    - name: Upload APK (for testing)    
      uses: actions/upload-artifact@v4    
      with:    
        name: "app-release-apk-v${{ needs.validate-inputs.outputs.version_name }}-${{ needs.validate-inputs.outputs.version_code }}"
        path: android/app/build/outputs/apk/release/*.apk    
        if-no-files-found: error    
        retention-days: 14  # Shorter retention for test APKs
        compression-level: 6

    # Enhanced Webhook Callback with Error Handling
    - name: Send Build Completion Callback
      if: always() && github.event.inputs.CALLBACK_URL != ''
      shell: bash
      run: |
        if [[ -n "${{ github.event.inputs.CALLBACK_URL }}" ]]; then
          CALLBACK_URL="${{ github.event.inputs.CALLBACK_URL }}"
          
          # Prepare callback data
          BUILD_STATUS="${{ job.status }}"
          BUILD_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          CALLBACK_DATA=$(cat <<EOF
        {
          "workflow_run_id": "${{ github.run_id }}",
          "status": "$BUILD_STATUS",
          "app_name": "${{ needs.validate-inputs.outputs.app_name }}",
          "version": "${{ needs.validate-inputs.outputs.version_name }}",
          "build_url": "$BUILD_URL",
          "timestamp": "$(date -Iseconds)"
        }
EOF
        )
          
          echo "📡 Sending build completion callback..."
          
          # Send callback with retry logic
          for i in {1..3}; do
            if curl -X POST \
              -H "Content-Type: application/json" \
              -d "$CALLBACK_DATA" \
              --max-time 30 \
              --retry 2 \
              "$CALLBACK_URL"; then
              echo "✅ Callback sent successfully on attempt $i"
              break
            else
              echo "⚠️ Callback attempt $i failed, retrying..."
              sleep 5
            fi
          done
        fi

  # Post-build Summary Job
  build-summary:
    name: "Build Summary"
    runs-on: ubuntu-latest
    needs: [validate-inputs, build]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Generate Build Summary
      shell: bash
      run: |
        echo "# 🏗️ Android Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📱 App Information" >> $GITHUB_STEP_SUMMARY
        echo "- **App Name:** ${{ needs.validate-inputs.outputs.app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package ID:** ${{ needs.validate-inputs.outputs.app_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ needs.validate-inputs.outputs.version_name }} (${{ needs.validate-inputs.outputs.version_code }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Target SDK:** ${{ needs.validate-inputs.outputs.target_sdk }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Web URL:** ${{ needs.validate-inputs.outputs.web_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Plugins:** ${{ needs.validate-inputs.outputs.plugins }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Build Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation:** ${{ needs.validate-inputs.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "## 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your Android app has been built successfully and is ready for deployment:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Available Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **AAB File**: Play Store ready (recommended for publishing)" >> $GITHUB_STEP_SUMMARY
          echo "- **APK File**: For testing and side-loading" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the AAB file from the artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "2. Upload to Google Play Console" >> $GITHUB_STEP_SUMMARY
          echo "3. Complete app listing and publish" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Play Store Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ AAB format (required since August 2021)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Target SDK ${{ needs.validate-inputs.outputs.target_sdk }} (2025 requirement)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Play App Signing enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The build process encountered errors. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi