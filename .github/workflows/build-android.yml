name: Build Android (Signed APK & AAB)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      MAKE_WEBHOOK_URL: ${{ secrets.MAKE_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      # --------- Project deps (unchanged build logic) ---------
      - name: Ensure Node project & Capacitor deps
        shell: bash
        run: |
          if [ ! -f package.json ]; then
            cat > package.json <<'JSON'
          {
            "name": "web2apk",
            "version": "1.0.0",
            "private": true
          }
          JSON
          fi
          npm i -g @capacitor/cli
          npm i @capacitor/core @capacitor/android --save-exact
          mkdir -p dist
          # Minimal placeholder; main content loads via server.url below
          echo '<!doctype html><meta name="viewport" content="width=device-width, initial-scale=1"><title>Web2APK</title><iframe src="${{ github.event.inputs.WEB_URL }}" style="border:0;position:fixed;inset:0;width:100%;height:100%"></iframe>' > dist/index.html

      - name: Generate/Update Capacitor config
        shell: bash
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const appName = "${{ github.event.inputs.APP_NAME }}";
          const appId   = "${{ github.event.inputs.APP_ID }}";
          const webUrl  = "${{ github.event.inputs.WEB_URL }}";
          const cfg = {
            appId: appId,
            appName: appName,
            webDir: "dist",
            server: { url: webUrl, androidScheme: "https", cleartext: true },
            android: { allowMixedContent: true }
          };
          fs.writeFileSync('capacitor.config.json', JSON.stringify(cfg, null, 2));
          NODE

      - name: Add Android & Sync
        shell: bash
        run: |
          npx cap add android || true
          npx cap sync android

      # --------- Signing (unchanged) ---------
      - name: Decode keystore from secret
        shell: bash
        run: |
          mkdir -p android
          echo "$KEYSTORE_BASE64" | base64 -d > android/my-release-key.jks

      - name: Verify keystore (alias & passwords)
        shell: bash
        run: |
          keytool -list -v -keystore android/my-release-key.jks \
            -storepass "$KEYSTORE_PASSWORD" -alias "$KEY_ALIAS" -keypass "$KEY_PASSWORD" >/dev/null

      # --------- Build (unchanged) ---------
      - name: Build (release, signed)
        working-directory: android
        shell: bash
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/my-release-key.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$PWD/my-release-key.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      # --------- Upload artifacts (SEPARATE) ---------
      - name: Upload APK (signed)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error
          retention-days: 7

      - name: Upload AAB (signed)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/*.aab
          if-no-files-found: error
          retention-days: 7

      # --------- Optional Make.com callback (unchanged logic) ---------
      - name: Callback to Make.com
        if: always()
        shell: bash
        run: |
          URL="${MAKE_WEBHOOK_URL}"
          if [ -z "$URL" ] && [ -n "${{ github.event.inputs.CALLBACK_URL }}" ]; then
            URL="${{ github.event.inputs.CALLBACK_URL }}"
          fi

          if [ -n "$URL" ]; then
            RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            STATUS="${{ job.status }}"
            APP_NAME='${{ github.event.inputs.APP_NAME }}'
            PKG_ID='${{ github.event.inputs.APP_ID }}'
            WEB_URL='${{ github.event.inputs.WEB_URL }}'
            # Artifact names (separate)
            APK_ARTIFACT="app-release-apk"
            AAB_ARTIFACT="app-release-aab"

            PAYLOAD=$(printf '{"status":"%s","app_name":"%s","package_id":"%s","web_url":"%s","run_url":"%s","apk_artifact":"%s","aab_artifact":"%s"}' \
              "$STATUS" "$APP_NAME" "$PKG_ID" "$WEB_URL" "$RUN_URL" "$APK_ARTIFACT" "$AAB_ARTIFACT")

            curl -sS -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$URL" || true
          else
            echo "No Make.com webhook URL provided. Skipping callback."
          fi
