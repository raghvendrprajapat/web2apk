name: Build Web ➜ Signed Android (APK & AAB)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name (shown to user)"
        required: true
        default: "My Web2App"
      APP_ID:
        description: "Package ID (e.g. com.example.app)"
        required: true
        default: "com.example.web2app"
      WEB_URL:
        description: "Your live web URL (https://...)"
        required: true
        default: "https://example.com"
      VERSION_NAME:
        description: "Public version name (e.g. 1.0.0)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Internal version code (must +1 every release)"
        required: true
        default: "1"
      TARGET_SDK:
        description: "Target / Compile SDK (e.g. 35)"
        required: true
        default: "35"
      MIN_SDK:
        description: "Min SDK (e.g. 22)"
        required: true
        default: "22"
      ALLOW_MIXED_CONTENT:
        description: "Allow http:// (true/false)"
        required: true
        default: "false"
      PLUGINS:
        description: "Extra native features"
        required: true
        type: choice
        default: "none"
        options:
          - "none"
          - "camera"
          - "push-notifications"
          - "location"
          - "camera_and_push"
          - "all"

permissions:
  contents: read

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      APP_ID: ${{ github.event.inputs.APP_ID }}
      WEB_URL: ${{ github.event.inputs.WEB_URL }}
      VERSION_NAME: ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE: ${{ github.event.inputs.VERSION_CODE }}
      TARGET_SDK: ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK: ${{ github.event.inputs.MIN_SDK }}
      ALLOW_MIXED_CONTENT: ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      PLUGINS: ${{ github.event.inputs.PLUGINS }}

      # signing secrets (SET THESE IN REPO -> Settings -> Secrets and variables -> Actions)
      KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx3g -XX:+UseParallelGC' -Dorg.gradle.daemon=false"

    steps:
      # 1. Checkout source
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Setup Java (Gradle/Android needs JDK 17)
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      # 3. Setup Node (NO cache so we don't require lockfile)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 4. Prepare web assets + minimal project if needed
      #
      # This step does ALL of this:
      # - if package.json exists:
      #       install deps (npm ci if lockfile exists, else npm install)
      #       try npm run build (if exists)
      #       pick dist/ or build/ as webDir
      # - if package.json NOT exists:
      #       create minimal package.json
      #       install Capacitor deps
      #       create minimal_www/index.html (simple loader)
      #
      # It always exports WEB_BUILD_DIR into $GITHUB_ENV
      - name: Prepare Web / Node project
        shell: bash
        run: |
          set -euo pipefail

          if [ -f package.json ]; then
            echo "[INFO] Found package.json, treating repo as existing web app."

            if [ -f package-lock.json ]; then
              echo "[INFO] Using npm ci"
              npm ci
            else
              echo "[WARN] No package-lock.json, using npm install"
              npm install
            fi

            # Try to build if build script exists
            if npm run | grep -q " build"; then
              echo "[INFO] Running npm run build"
              npm run build || { echo "[ERROR] npm run build failed"; exit 1; }
            else
              echo "[WARN] No build script found in package.json, skipping build"
            fi

            # Detect output dir
            if [ -d "dist" ]; then
              echo "WEB_BUILD_DIR=dist" >> $GITHUB_ENV
            elif [ -d "build" ]; then
              echo "WEB_BUILD_DIR=build" >> $GITHUB_ENV
            else
              echo "[WARN] Could not detect dist/ or build/. Using public/ or current folder."
              if [ -d "public" ]; then
                echo "WEB_BUILD_DIR=public" >> $GITHUB_ENV
              else
                mkdir -p minimal_www
                echo "<!doctype html><html><body><p>Loading...</p></body></html>" > minimal_www/index.html
                echo "WEB_BUILD_DIR=minimal_www" >> $GITHUB_ENV
              fi
            fi

            # Ensure Capacitor deps exist
            npm install @capacitor/core @capacitor/cli @capacitor/android --save-dev

          else
            echo "[INFO] No package.json found. Creating minimal Capacitor project."
            npm init -y

            # Add Capacitor core/CLI/Android
            npm install @capacitor/core @capacitor/cli @capacitor/android --save-dev

            # Make a tiny web folder with loader screen
            mkdir -p minimal_www
            cat > minimal_www/index.html <<EOF
<!doctype html>
<html>
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width,initial-scale=1"/>
    <title>${APP_NAME}</title>
  </head>
  <body style="font-family:sans-serif;text-align:center;padding-top:3rem;">
    <p>Loading ${APP_NAME} ...</p>
  </body>
</html>
EOF

            echo "WEB_BUILD_DIR=minimal_www" >> $GITHUB_ENV
          fi

          echo "[INFO] WEB_BUILD_DIR set to $(cat $GITHUB_ENV | grep WEB_BUILD_DIR)"

      # 5. Validate critical inputs early (fail fast if wrong)
      - name: Validate inputs & secrets
        shell: bash
        run: |
          set -euo pipefail
          echo "## Input Validation" >> "$GITHUB_STEP_SUMMARY"

          # validate APP_ID format (com.example.app)
          if [[ ! "$APP_ID" =~ ^[a-z]+([a-z0-9_]*)(\.[a-z][a-z0-9_]*)+$ ]]; then
            echo "❌ APP_ID invalid: $APP_ID" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          # VERSION_CODE must be integer
          if ! [[ "$VERSION_CODE" =~ ^[0-9]+$ ]]; then
            echo "❌ VERSION_CODE must be integer" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          # HTTPS rule
          if [[ "$ALLOW_MIXED_CONTENT" != "true" && ! "$WEB_URL" =~ ^https:// ]]; then
            echo "❌ WEB_URL must start with https:// unless ALLOW_MIXED_CONTENT=true" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          # signing secrets must exist
          if [[ -z "${KEYSTORE_BASE64:-}" || -z "${KEYSTORE_PASSWORD:-}" || -z "${KEY_ALIAS:-}" || -z "${KEY_PASSWORD:-}" ]]; then
            echo "❌ Missing signing secrets. You MUST set ANDROID_KEYSTORE_BASE64, KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD in repo secrets." | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          echo "✔ Inputs look OK" >> "$GITHUB_STEP_SUMMARY"

      # 6. Restore keystore file from Base64 secret
      - name: Restore signing keystore
        shell: bash
        run: |
          set -euo pipefail
          echo "$KEYSTORE_BASE64" | base64 -d > android-release.keystore
          ls -l android-release.keystore

      # 7. Create / Update Capacitor config and Android platform
      #
      # We now have:
      #   - WEB_BUILD_DIR in $GITHUB_ENV
      #   - Capacitor deps installed
      #
      # We'll:
      #   - init Capacitor if missing
      #   - write capacitor.config.ts (force overwrite for consistency)
      #   - install optional plugins
      #   - add android platform
      #   - sync web to android
      - name: Configure Capacitor & Android project
        shell: bash
        run: |
          set -euo pipefail
          source $GITHUB_ENV

          # init Capacitor if no config yet
          if [ ! -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.json" ]; then
            npx cap init "$APP_NAME" "$APP_ID" --web-dir="${WEB_BUILD_DIR}"
          fi

          # overwrite capacitor.config.ts every run (single source of truth)
          cat > capacitor.config.ts <<EOF
import { CapacitorConfig } from '@capacitor/cli';

const config: CapacitorConfig = {
  appId: '${APP_ID}',
  appName: '${APP_NAME}',
  webDir: '${WEB_BUILD_DIR}',
  bundledWebRuntime: false,
  server: {
    url: '${WEB_URL}',
    cleartext: ${ALLOW_MIXED_CONTENT} === 'true' ? true : false
  },
  android: {
    allowMixedContent: ${ALLOW_MIXED_CONTENT} === 'true' ? true : false
  }
};

export default config;
EOF

          # install requested plugins
          case "$PLUGINS" in
            "none")
              echo "[INFO] No extra plugins requested"
              ;;
            "camera")
              npm install @capacitor/camera
              ;;
            "push-notifications")
              npm install @capacitor/push-notifications
              ;;
            "location")
              npm install @capacitor/geolocation
              ;;
            "camera_and_push")
              npm install @capacitor/camera @capacitor/push-notifications
              ;;
            "all")
              npm install @capacitor/camera @capacitor/push-notifications @capacitor/geolocation
              ;;
            *)
              echo "[ERROR] Unknown PLUGINS option: $PLUGINS"
              exit 1
              ;;
          esac

          # add android platform if not present
          npx cap add android || true
          npx cap sync android

      # 8. Make sure Android SDK / build-tools exist for TARGET_SDK.
      #    Runners usually already have sdkmanager, but we try to install what we need.
      - name: Ensure Android SDK components
        shell: bash
        run: |
          set -euo pipefail

          # prefer ANDROID_SDK_ROOT provided by runner
          export ANDROID_HOME="${ANDROID_HOME:-${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}}"
          echo "ANDROID_HOME is $ANDROID_HOME"

          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null 2>&1 || true

          # Try installing required platforms/build-tools.
          # Don't fail hard if specific subversion doesn't exist, just best-effort.
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-${TARGET_SDK}" \
            "build-tools;${TARGET_SDK}.0.0" \
            >/dev/null 2>&1 || true

      # 9. Patch Gradle config:
      #    - set versionCode, versionName, minSdk, targetSdk, compileSdk
      #    - allow cleartextTraffic if requested
      #    - copy keystore and inject signingConfigs (if not already there)
      - name: Patch Android Gradle for release/signing
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          source $GITHUB_ENV

          cp ../android-release.keystore app/release.keystore

          # figure out Groovy vs Kotlin DSL
          APP_GRADLE_GROOVY="app/build.gradle"
          APP_GRADLE_KTS="app/build.gradle.kts"

          TARGET_FILE=""
          if [ -f "$APP_GRADLE_GROOVY" ]; then
            TARGET_FILE="$APP_GRADLE_GROOVY"
          elif [ -f "$APP_GRADLE_KTS" ]; then
            TARGET_FILE="$APP_GRADLE_KTS"
          else
            echo "[ERROR] Could not find app/build.gradle or app/build.gradle.kts"
            exit 1
          fi

          echo "[INFO] Patching $TARGET_FILE"

          # versionCode / versionName
          sed -i "s/versionCode [0-9]\\+/versionCode ${VERSION_CODE}/" "$TARGET_FILE" || true
          sed -i "s/versionName \".*\"/versionName \"${VERSION_NAME}\"/" "$TARGET_FILE" || true
          sed -i "s/versionCode = [0-9]\\+/versionCode = ${VERSION_CODE}/" "$TARGET_FILE" || true
          sed -i "s/versionName = \".*\"/versionName = \"${VERSION_NAME}\"/" "$TARGET_FILE" || true

          # SDK levels
          sed -i "s/minSdkVersion [0-9]\\+/minSdkVersion ${MIN_SDK}/" "$TARGET_FILE" || true
          sed -i "s/targetSdkVersion [0-9]\\+/targetSdkVersion ${TARGET_SDK}/" "$TARGET_FILE" || true
          sed -i "s/compileSdkVersion [0-9]\\+/compileSdkVersion ${TARGET_SDK}/" "$TARGET_FILE" || true

          sed -i "s/minSdk = [0-9]\\+/minSdk = ${MIN_SDK}/" "$TARGET_FILE" || true
          sed -i "s/targetSdk = [0-9]\\+/targetSdk = ${TARGET_SDK}/" "$TARGET_FILE" || true
          sed -i "s/compileSdk = [0-9]\\+/compileSdk = ${TARGET_SDK}/" "$TARGET_FILE" || true

          # allow cleartext if needed
          if [ "${ALLOW_MIXED_CONTENT}" = "true" ]; then
            MANIFEST="app/src/main/AndroidManifest.xml"
            if [ -f "$MANIFEST" ]; then
              if ! grep -q 'usesCleartextTraffic=' "$MANIFEST"; then
                sed -i 's/<application /<application android:usesCleartextTraffic="true" /' "$MANIFEST"
              fi
            fi
          fi

          # inject signing config if not present
          if ! grep -q "signingConfigs" "$TARGET_FILE"; then
            if [[ "$TARGET_FILE" == *".kts" ]]; then
              # Kotlin DSL
              sed -i "/android\s*{/a \\
                  signingConfigs {\n\
                      create(\"release\") {\n\
                          storeFile = file(\"release.keystore\")\n\
                          storePassword = System.getenv(\"KEYSTORE_PASSWORD\")\n\
                          keyAlias = System.getenv(\"KEY_ALIAS\")\n\
                          keyPassword = System.getenv(\"KEY_PASSWORD\")\n\
                      }\n\
                  }\n\
                  buildTypes {\n\
                      getByName(\"release\") {\n\
                          signingConfig = signingConfigs.getByName(\"release\")\n\
                          isMinifyEnabled = false\n\
                          isShrinkResources = false\n\
                          isDebuggable = false\n\
                      }\n\
                  }\n" "$TARGET_FILE"
            else
              # Groovy DSL
              sed -i "/android\s*{/a \\
                  signingConfigs {\n\
                      release {\n\
                          storeFile file(\"release.keystore\")\n\
                          storePassword System.getenv(\"KEYSTORE_PASSWORD\")\n\
                          keyAlias System.getenv(\"KEY_ALIAS\")\n\
                          keyPassword System.getenv(\"KEY_PASSWORD\")\n\
                      }\n\
                  }\n\
                  buildTypes {\n\
                      release {\n\
                          signingConfig signingConfigs.release\n\
                          minifyEnabled false\n\
                          shrinkResources false\n\
                          debuggable false\n\
                      }\n\
                  }\n" "$TARGET_FILE"
            fi
          else
            echo "[INFO] signingConfigs already present, not injecting."
          fi

      # 10. Build release bundle/apk with Gradle
      - name: Build release (AAB/APK)
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          ./gradlew clean
          ./gradlew :app:bundleRelease
          ./gradlew :app:assembleRelease

          mkdir -p ../signed_output
          cp app/build/outputs/bundle/release/*.aab ../signed_output/ || true
          cp app/build/outputs/apk/release/*.apk ../signed_output/ || true

      # 11. Upload artifacts back to GitHub
      - name: Upload Signed AAB/APK
        uses: actions/upload-artifact@v4
        with:
          name: signed-release-artifacts
          path: signed_output/

      # 12. Nice summary
      - name: Summary / Next steps
        if: always()
        shell: bash
        run: |
          echo "### ✅ Build attempt finished" >> $GITHUB_STEP_SUMMARY
          echo "- Check artifact 'signed-release-artifacts' for:" >> $GITHUB_STEP_SUMMARY
          echo "  • app-release.aab  (upload this to Play Console → Internal testing)" >> $GITHUB_STEP_SUMMARY
          echo "  • app-release.apk  (install on device for testing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "versionName: $VERSION_NAME" >> $GITHUB_STEP_SUMMARY
          echo "versionCode: $VERSION_CODE" >> $GITHUB_STEP_SUMMARY
          echo "appId / packageName: $APP_ID" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Remember: In Play Console, versionCode must always go UP for every new upload." >> $GITHUB_STEP_SUMMARY
