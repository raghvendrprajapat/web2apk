name: Build TWA (Signed AAB for Play Store)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name (shown on device)"
        required: true
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
      WEB_URL:
        description: "PWA Start URL (must be HTTPS, e.g., https://example.com/)"
        required: true
      MANIFEST_URL:
        description: "manifest.json URL (defaults to WEB_URL + manifest.json)"
        required: false
        default: ""
      THEME_COLOR:
        description: "Theme color (e.g., #FFFFFF)"
        required: false
        default: "#FFFFFF"
      BACKGROUND_COLOR:
        description: "Background color (e.g., #FFFFFF)"
        required: false
        default: "#FFFFFF"
      CALLBACK_URL:
        description: "Optional Make.com webhook to notify"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      # Upload keystore (your Play **upload** key). Store these in GitHub Secrets.
      KEYSTORE_BASE64: ${{ secrets.UPLOAD_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.UPLOAD_KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.UPLOAD_KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.UPLOAD_KEY_PASSWORD }}
      MAKE_WEBHOOK_URL: ${{ secrets.MAKE_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use JDK 17 (current requirement for modern Android Gradle Plugin).
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      # -------- Guardrails: inputs & PWA reachability --------
      - name: Validate inputs (HTTPS, package id, manifest)
        shell: bash
        run: |
          set -e
          WURL='${{ github.event.inputs.WEB_URL }}'
          [[ "$WURL" =~ ^https:// ]] || { echo "WEB_URL must start with https://"; exit 1; }

          APPID='${{ github.event.inputs.APP_ID }}'
          [[ "$APPID" =~ ^[A-Za-z][A-Za-z0-9_]*(\.[A-Za-z][A-Za-z0-9_]*)+$ ]] || { echo "Invalid APP_ID"; exit 1; }

          # Manifest URL defaults to WEB_URL + manifest.json
          if [ -z "${{ github.event.inputs.MANIFEST_URL }}" ]; then
            MURL="${WURL%/}/manifest.json"
          else
            MURL='${{ github.event.inputs.MANIFEST_URL }}'
          fi
          echo "MANIFEST_URL=$MURL" >> $GITHUB_ENV

          # Quick reachability probes (non-fatal but helpful)
          curl -I --max-time 10 "$WURL" | head -n1 || true
          curl -I --max-time 10 "$MURL" | head -n1 || true

      # -------- Install Bubblewrap (pin major to reduce surprises) --------
      - name: Install Bubblewrap CLI
        shell: bash
        run: |
          npm i -g @bubblewrap/cli@12

      # -------- Initialize / update a TWA project non-interactively --------
      - name: Init Bubblewrap project
        shell: bash
        run: |
          rm -rf twa && mkdir -p twa && cd twa
          # Init from the web manifest
          bubblewrap init --manifest "$MANIFEST_URL" --directory . --force \
            --skipPwaValidation \
            --packageId '${{ github.event.inputs.APP_ID }}' \
            --name '${{ github.event.inputs.APP_NAME }}'

          # Patch twa-manifest.json with safe, Play-friendly values
          node - <<'NODE'
          const fs = require('fs');
          const m = JSON.parse(fs.readFileSync('twa-manifest.json','utf8'));
          m.packageId = process.env.PACKAGE_ID = '${{ github.event.inputs.APP_ID }}';
          m.name = '${{ github.event.inputs.APP_NAME }}';
          m.display = 'standalone';
          m.startUrl = '${{ github.event.inputs.WEB_URL }}';
          m.themeColor = '${{ github.event.inputs.THEME_COLOR }}';
          m.backgroundColor = '${{ github.event.inputs.BACKGROUND_COLOR }}';
          // Keep it strict: no cleartext/mixed content flags in TWA.
          // If you need Play Billing from the web, you can turn this on later:
          // m.features = { playBilling: { enabled: true } };
          fs.writeFileSync('twa-manifest.json', JSON.stringify(m, null, 2));
          NODE

          # Apply manifest changes to Android project
          bubblewrap update

      # -------- Decode upload keystore (DO NOT commit) --------
      - name: Decode upload keystore
        working-directory: twa
        shell: bash
        run: |
          test -n "$KEYSTORE_BASE64" || { echo "UPLOAD_KEYSTORE_BASE64 secret missing"; exit 1; }
          echo "$KEYSTORE_BASE64" | base64 -d > upload-key.jks
          keytool -list -v -keystore upload-key.jks -storepass "$KEYSTORE_PASSWORD" -alias "$KEY_ALIAS" -keypass "$KEY_PASSWORD" >/dev/null

      # -------- Ensure current SDK targets + deterministic versioning --------
      - name: Bump versionCode / versionName & enforce targetSdk
        working-directory: twa/android/app
        shell: bash
        run: |
          set -e
          # Monotonic versionCode from run number; adjust base to avoid collisions.
          VC=$((200000 + $GITHUB_RUN_NUMBER))
          VN="$(date +%Y.%m.%d).${GITHUB_RUN_NUMBER}"

          sed -i "s/versionCode [0-9]\+/versionCode ${VC}/" build.gradle
          sed -i "s/versionName \".*\"/versionName \"${VN}\"/" build.gradle

          # Fail fast if targetSdk < 34 (update as Play requirements rise)
          TSDK=$(grep -oE "targetSdkVersion [0-9]+" build.gradle | awk '{print $2}' | head -n1 || echo 0)
          [ "$TSDK" -ge 34 ] || { echo "targetSdkVersion ($TSDK) too low; bump in android/app/build.gradle"; exit 1; }

      # -------- Build Signed AAB (Play upload) + APK (testing) --------
      - name: Build (bundle + apk) with signing
        working-directory: twa/android
        shell: bash
        run: |
          set -e
          chmod +x ./gradlew
          ./gradlew clean

          # Signed release APK (testing/other stores)
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/../upload-key.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

          # Signed AAB (Play upload)
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$PWD/../upload-key.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      # -------- Artifacts --------
      - name: Upload AAB (signed, Play-ready)
        uses: actions/upload-artifact@v4
        with:
          name: twa-release-aab
          path: twa/android/app/build/outputs/bundle/release/*.aab
          if-no-files-found: error
          retention-days: 7

      - name: Upload APK (signed, for testing)
        uses: actions/upload-artifact@v4
        with:
          name: twa-release-apk
          path: twa/android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error
          retention-days: 7

      # -------- Optional callback to Make.com --------
      - name: Callback to Make.com
        if: always()
        shell: bash
        run: |
          URL="${MAKE_WEBHOOK_URL}"
          if [ -z "$URL" ] && [ -n "${{ github.event.inputs.CALLBACK_URL }}" ]; then
            URL='${{ github.event.inputs.CALLBACK_URL }}'
          fi

          if [ -n "$URL" ]; then
            RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            STATUS="${{ job.status }}"
            APP_NAME='${{ github.event.inputs.APP_NAME }}'
            PKG_ID='${{ github.event.inputs.APP_ID }}'
            WEB='${{ github.event.inputs.WEB_URL }}'
            PAYLOAD=$(printf '{"status":"%s","app_name":"%s","package_id":"%s","web_url":"%s","run_url":"%s","aab_artifact":"twa-release-aab","apk_artifact":"twa-release-apk"}' \
              "$STATUS" "$APP_NAME" "$PKG_ID" "$WEB" "$RUN_URL")
            curl -sS -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$URL" || true
          else
            echo "No Make webhook provided. Skipping."
          fi
