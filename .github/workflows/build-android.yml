name: Build Android (Signed APK & AAB) + Make.com

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Android SDK (cmdline-tools + build-tools)
        uses: android-actions/setup-android@v3

      - name: Ensure Node project & Capacitor deps
        run: |
          set -e
          if [ ! -f package.json ]; then
            cat > package.json <<'JSON'
            {
              "name": "web2apk",
              "version": "1.0.0",
              "private": true,
              "scripts": {
                "build": "echo \"(no web build step)\""
              }
            }
            JSON
          fi
          npm pkg set name="web2apk" >/dev/null
          npm pkg set version="1.0.0" >/dev/null
          npm pkg set private=true >/dev/null
          # Capacitor core/cli/android
          npm i -D @capacitor/cli@latest
          npm i @capacitor/core@latest
          npm i @capacitor/android@latest
          # (optional) अगर web assets नहीं हैं तो एक placeholder index.html बना दें
          mkdir -p dist && echo '<!doctype html><meta charset="utf-8"><title>Web2APK</title><body>Web2APK</body>' > dist/index.html

      - name: Generate/Update Capacitor config
        run: |
          set -e
          node - <<'NODE'
          const fs = require('fs');
          const appName = process.env.APP_NAME;
          const appId   = process.env.APP_ID;
          const webUrl  = process.env.WEB_URL;

          const cfg = {
            appId,
            appName,
            webDir: "dist",
            server: {
              url: webUrl,
              cleartext: false,
              androidScheme: "https"
            },
            android: {
              allowMixedContent: true
            }
          };

          // config file name (Capacitor v5+ default is capacitor.config.ts/js/json – हम json बनाएँगे)
          fs.writeFileSync('capacitor.config.json', JSON.stringify(cfg, null, 2));
          NODE
        env:
          APP_NAME: ${{ github.event.inputs.APP_NAME }}
          APP_ID:   ${{ github.event.inputs.APP_ID }}
          WEB_URL:  ${{ github.event.inputs.WEB_URL }}

      - name: Add Android & Sync
        run: |
          npx cap add android || true
          npx cap sync android

      - name: Decode keystore from secret
        run: |
          set -e
          mkdir -p android
          echo "${KEYSTORE_BASE64}" | base64 -d > android/my-release-key.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Verify keystore (alias & passwords)
        run: |
          set -e
          keytool -list -v -keystore android/my-release-key.jks -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" >/dev/null

      - name: Build (release, signed)
        working-directory: android
        run: |
          set -e
          # Gradle signing params (Android Gradle Plugin picks these)
          export ORG_GRADLE_PROJECT_ANDROID_STORE_FILE=my-release-key.jks
          export ORG_GRADLE_PROJECT_ANDROID_STORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}"
          export ORG_GRADLE_PROJECT_ANDROID_KEY_ALIAS="${{ secrets.KEY_ALIAS }}"
          export ORG_GRADLE_PROJECT_ANDROID_KEY_PASSWORD="${{ secrets.KEY_PASSWORD }}"

          chmod +x ./gradlew
          ./gradlew clean
          # APK
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=${ORG_GRADLE_PROJECT_ANDROID_STORE_FILE} \
            -Pandroid.injected.signing.store.password=${ORG_GRADLE_PROJECT_ANDROID_STORE_PASSWORD} \
            -Pandroid.injected.signing.key.alias=${ORG_GRADLE_PROJECT_ANDROID_KEY_ALIAS} \
            -Pandroid.injected.signing.key.password=${ORG_GRADLE_PROJECT_ANDROID_KEY_PASSWORD}
          # AAB
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=${ORG_GRADLE_PROJECT_ANDROID_STORE_FILE} \
            -Pandroid.injected.signing.store.password=${ORG_GRADLE_PROJECT_ANDROID_STORE_PASSWORD} \
            -Pandroid.injected.signing.key.alias=${ORG_GRADLE_PROJECT_ANDROID_KEY_ALIAS} \
            -Pandroid.injected.signing.key.password=${ORG_GRADLE_PROJECT_ANDROID_KEY_PASSWORD}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: |
            android/app/build/outputs/apk/release/*.apk

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-aab
          path: |
            android/app/build/outputs/bundle/release/*.aab

      - name: Callback to Make.com (optional)
        if: always() && inputs.CALLBACK_URL != ''
        env:
          MAKE_URL: ${{ github.event.inputs.CALLBACK_URL }}
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          PAYLOAD=$(jq -n \
            --arg status "${{ job.status }}" \
            --arg run_url "$RUN_URL" \
            --arg app_name "${{ github.event.inputs.APP_NAME }}" \
            --arg package_id "${{ github.event.inputs.APP_ID }}" \
            --arg web_url "${{ github.event.inputs.WEB_URL }}" \
            '{status:$status, run_url:$run_url, app_name:$app_name, package_id:$package_id, web_url:$web_url}')
          curl -sS -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$MAKE_URL"
