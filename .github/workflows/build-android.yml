name: Build Android (Signed APK & AAB)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name (e.g., My Awesome App)"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      PLUGINS:
        description: "Capacitor plugins to include"
        type: choice
        required: true
        default: "none"
        options:
          - "none"
          - "camera"
          - "push-notifications"
          - "location"
          - "camera_and_push"
          - "all"
      VERSION_NAME:
        description: "App Version Name (e.g., 1.0.1)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Unique Version Code (integer, e.g., 1)"
        required: true
        default: "1"
      ALLOW_MIXED_CONTENT:
        description: "Allow http (non-HTTPS) content? (true/false)"
        required: true
        default: "false"
      TARGET_SDK:
        description: "Target/Compile SDK (Play 2025 rule: 35)"
        required: true
        default: "35"
      MIN_SDK:
        description: "Min SDK (Capacitor typical >=22)"
        required: true
        default: "22"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      # perf tuning
      GRADLE_OPTS: "-Dorg.gradle.jvmargs='-Xmx3g -XX:+UseParallelGC' -Dorg.gradle.daemon=false"
      TARGET_SDK: ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK: ${{ github.event.inputs.MIN_SDK }}
      APP_ID: ${{ github.event.inputs.APP_ID }}
      VERSION_NAME: ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE: ${{ github.event.inputs.VERSION_CODE }}
      WEB_URL: ${{ github.event.inputs.WEB_URL }}
      ALLOW_MIXED_CONTENT: ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- CACHES ----
      - name: Cache NPM
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # ---- VALIDATIONS ----
      - name: Validate Inputs & Secrets
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          echo "## Pre-Build Validation" >> "$GITHUB_STEP_SUMMARY"
          if [[ ! "$APP_ID" =~ ^[a-z]+([a-z0-9_]*)(\.[a-z][a-z0-9_]*)+$ ]]; then
            echo "Invalid APP_ID: $APP_ID" | tee -a "$GITHUB_STEP_SUMMARY"; exit 1; fi
          if ! [[ "$VERSION_CODE" =~ ^[0-9]+$ ]]; then
            echo "VERSION_CODE must be integer" | tee -a "$GITHUB_STEP_SUMMARY"; exit 1; fi
          if [[ "$ALLOW_MIXED_CONTENT" != "true" && ! "$WEB_URL" =~ ^https:// ]]; then
            echo "WEB_URL must be https:// (or set ALLOW_MIXED_CONTENT=true)" | tee -a "$GITHUB_STEP_SUMMARY"; exit 1; fi
          if [[ "$TARGET_SDK" -lt 35 ]]; then
            echo "TARGET_SDK must be 35 (Play 2025)" | tee -a "$GITHUB_STEP_SUMMARY"; exit 1; fi
          if [[ "$MIN_SDK" -lt 22 ]]; then
            echo "MIN_SDK should be >= 22" | tee -a "$GITHUB_STEP_SUMMARY"; exit 1; fi
          for s in KEYSTORE_PASSWORD KEY_ALIAS KEY_PASSWORD; do
            [[ -z "${!s:-}" ]] && echo "Missing secret: $s" | tee -a "$GITHUB_STEP_SUMMARY" && M=1 || true
          done; [[ "${M:-0}" -eq 1 ]] && exit 1 || true
          echo "Inputs & secrets OK" >> "$GITHUB_STEP_SUMMARY"

      - name: Setup Java (JDK 21)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Android SDK (API & Build-Tools)
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools
            platforms;android-${{ github.event.inputs.TARGET_SDK }}
            build-tools;${{ github.event.inputs.TARGET_SDK }}.0.0

      # ---- INSTALL ----
      - name: Install Capacitor CLI & Core (npm ci)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f package.json ]; then
            cat > package.json <<'JSON'
            { "name": "web2apk-app", "version": "1.0.0", "private": true }
            JSON
          fi
          npm ci || npm i
          npm i -g @capacitor/cli@latest
          npm i @capacitor/core@latest @capacitor/android@latest --save-exact

      - name: Install Selected Capacitor Plugins
        shell: bash
        run: |
          CHOICE="${{ github.event.inputs.PLUGINS }}"
          if [ "$CHOICE" = "camera" ]; then
            PLUGINS_TO_INSTALL="@capacitor/camera"
          elif [ "$CHOICE" = "push-notifications" ]; then
            PLUGINS_TO_INSTALL="@capacitor/push-notifications"
          elif [ "$CHOICE" = "location" ]; then
            PLUGINS_TO_INSTALL="@capacitor/geolocation"
          elif [ "$CHOICE" = "camera_and_push" ]; then
            PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications"
          elif [ "$CHOICE" = "all" ]; then
            PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications @capacitor/geolocation"
          else
            PLUGINS_TO_INSTALL=""
          fi
          [ -n "$PLUGINS_TO_INSTALL" ] && npm i $PLUGINS_TO_INSTALL --save-exact || echo "No extra plugins"
          mkdir -p www
          echo '<!doctype html><html><head><meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover"></head><body></body></html>' > www/index.html

      # ---- CAPACITOR INIT ----
      - name: Init & Configure Capacitor
        shell: bash
        run: |
          npx cap init "${{ github.event.inputs.APP_NAME }}" "$APP_ID" --web-dir "www"
          npx cap config set server.url "$WEB_URL"
          npx cap config set server.androidScheme "https"
          npx cap config set android.allowMixedContent "${{ github.event.inputs.ALLOW_MIXED_CONTENT }}"

      - name: Add Android platform & Sync
        shell: bash
        run: |
          npx cap add android
          npx cap sync android

      # ---- ENFORCE SDK LEVELS ----
      - name: Force SDK levels (target/compile/min)
        shell: bash
        run: |
          set -euo pipefail
          FILE_VARS="android/variables.gradle"
          if [ -f "$FILE_VARS" ]; then
            sed -i "s/compileSdkVersion *= *[0-9]\+/compileSdkVersion = $TARGET_SDK/" $FILE_VARS
            sed -i "s/targetSdkVersion *= *[0-9]\+/targetSdkVersion = $TARGET_SDK/" $FILE_VARS
            sed -i "s/minSdkVersion *= *[0-9]\+/minSdkVersion = $MIN_SDK/" $FILE_VARS
          else
            sed -i "s/compileSdkVersion [0-9]\+/compileSdkVersion $TARGET_SDK/" android/app/build.gradle || true
            sed -i "s/targetSdkVersion [0-9]\+/targetSdkVersion $TARGET_SDK/" android/app/build.gradle || true
            sed -i "s/minSdkVersion [0-9]\+/minSdkVersion $MIN_SDK/" android/app/build.gradle || true
          fi

      - name: Set App Version in Gradle
        shell: bash
        run: |
          GRADLE_FILE="android/app/build.gradle"
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" $GRADLE_FILE
          sed -i "s/versionCode .*/versionCode $VERSION_CODE/" $GRADLE_FILE

      # ---- KEYSTORE ----
      - name: Decode Keystore (scoped secret)
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        shell: bash
        run: |
          set -euo pipefail
          base64 -d <<<"$KEYSTORE_BASE64" > android/release-key.jks
          keytool -list -v -keystore android/release-key.jks -storepass "$KEYSTORE_PASSWORD" >/dev/null 2>&1 || { echo "Keystore verify failed"; exit 1; }

      # ---- BUILD ----
      - name: Build Signed AAB and APK
        working-directory: android
        shell: bash
        env:
          STORE_FILE: $PWD/release-key.jks
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          ./gradlew --no-daemon bundleRelease \
            -Pandroid.injected.signing.store.file="$STORE_FILE" \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
          ./gradlew --no-daemon assembleRelease \
            -Pandroid.injected.signing.store.file="$STORE_FILE" \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      - name: Validate AAB Size (<4GB)
        shell: bash
        run: |
          AAB="$(ls android/app/build/outputs/bundle/release/*.aab | head -n1)"
          [ -z "$AAB" ] && echo "No AAB found" && exit 1
          SIZE_BYTES=$(stat -c%s "$AAB")
          LIMIT=$((4*1024*1024*1024))
          [ "$SIZE_BYTES" -lt "$LIMIT" ] || { echo "AAB >=4GB"; exit 1; }

      # ---- ARTIFACTS ----
      - name: Upload AAB (Play Store ready)
        uses: actions/upload-artifact@v4
        with:
          name: aab-${{ env.VERSION_NAME }}-${{ env.VERSION_CODE }}
          path: android/app/build/outputs/bundle/release/*.aab
          if-no-files-found: error
          retention-days: 30

      - name: Upload APK (for testing)
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ env.VERSION_NAME }}-${{ env.VERSION_CODE }}
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error
          retention-days: 14

      # ---- OPTIONAL WEBHOOK ----
      - name: Notify Make.com Webhook (optional)
        if: ${{ secrets.MAKE_WEBHOOK_URL != '' }}
        shell: bash
        run: |
          URL="${{ secrets.MAKE_WEBHOOK_URL }}"
          PAYLOAD=$(jq -n --arg appId "$APP_ID" --arg vN "$VERSION_NAME" --arg vC "$VERSION_CODE" '{appId:$appId, versionName:$vN, versionCode:$vC, status:"success"}')
          for i in {1..3}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$URL" || true)
            [[ "$code" == "200" || "$code" == "202" ]] && exit 0 || sleep 3
          done
          echo "Webhook failed (non-blocking)"

      - name: Secure Cleanup
        if: always()
        shell: bash
        run: rm -f android/release-key.jks || true
