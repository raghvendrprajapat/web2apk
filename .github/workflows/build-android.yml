name: Build Android (Signed APK & AAB)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # जानबूझकर cache नहीं — lock file न होने पर error आता है

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: "latest"

      # ------- Node/Capacitor project ensure -------
      - name: Ensure Node project & Capacitor deps
        run: |
          if [ ! -f package.json ]; then
            npm init -y
          fi

          # Capacitor core + CLI
          npm i @capacitor/core @capacitor/cli --save

          # webDir के लिए छोटी placeholder site (अगर dist नहीं है)
          mkdir -p dist
          if [ ! -f dist/index.html ]; then
            cat > dist/index.html <<'HTML'
            <!doctype html><html><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
            <title>Web2APK</title></head><body><h1>Web2APK</h1><p>Build placeholder.</p></body></html>
            HTML
          fi

      - name: Generate/Update Capacitor config
        run: |
          node -e '
            const fs = require("fs");
            const cfgPath = "capacitor.config.json";
            const cfg = fs.existsSync(cfgPath) ? JSON.parse(fs.readFileSync(cfgPath,"utf8")) : {};
            cfg.appId    = process.env.APP_ID;
            cfg.appName  = process.env.APP_NAME;
            cfg.webDir   = "dist";
            cfg.server   = { url: process.env.WEB_URL, cleartext: true, androidScheme: "https" };
            // कुछ वेबव्यूज़ के लिए allowMixedContent:
            cfg.android  = { allowMixedContent: true };
            fs.writeFileSync(cfgPath, JSON.stringify(cfg, null, 2));
          '
        env:
          APP_NAME: ${{ github.event.inputs.APP_NAME }}
          APP_ID:   ${{ github.event.inputs.APP_ID }}
          WEB_URL:  ${{ github.event.inputs.WEB_URL }}

      - name: Add Android & Sync
        run: |
          npx cap add android || true
          npx cap sync android

      # ------- Signing keystore from secret -------
      - name: Decode keystore from secret
        run: |
          mkdir -p android
          echo "${KEYSTORE_BASE64}" | base64 -d > android/my-release-key.jks
          ls -lh android/my-release-key.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Verify keystore (alias & passwords)
        run: |
          keytool -list -v \
            -keystore android/my-release-key.jks \
            -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
            -alias "${{ secrets.KEY_ALIAS }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}"

      # ------- Build (signed) -------
      - name: Build (release, signed)
        working-directory: android
        run: |
          chmod +x ./gradlew
          ./gradlew clean

          # Gradle properties से inject करके sign करें
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file="$PWD/my-release-key.jks" \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"

          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file="$PWD/my-release-key.jks" \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/bundle/release/*.aab

      - name: Callback to Make.com (optional)
        if: ${{ github.event.inputs.CALLBACK_URL != '' }}
        run: |
          curl -sS -X POST "${{ github.event.inputs.CALLBACK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{\"run_id\":\"${GITHUB_RUN_ID}\",\"repo\":\"${GITHUB_REPOSITORY}\",\"url\":\"https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}"
