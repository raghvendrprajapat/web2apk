#.github/workflows/android-ci.yml

name: Android Production Build & Sign

# This workflow is triggered on pushes and pull requests to the main and develop branches.
# This ensures continuous validation of the codebase.
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-sign:
    name: Build and Sign AAB
    # The workflow runs on the latest version of Ubuntu provided by GitHub.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Determine the correct commit SHA for traceability.
      # For pull requests, github.sha is a temporary merge commit.
      # The actual head commit of the PR branch is what's needed for accurate tracking.
      - name: Determine Commit SHA
        id: get_sha
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "commit_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          else
            echo "commit_sha=${{ github.sha }}" >> $GITHUB_ENV
          fi

      # Step 2: Checkout the repository source code.
      # Pinning to a full-length commit SHA is a critical security measure.
      # It ensures the exact, vetted version of the action is used, preventing supply-chain attacks.
      # fetch-depth: 0 is used to retrieve all git history, which can be necessary for certain build tools or scripts.
      - name: Checkout Repository
        uses: actions/checkout@a4402bcfa7651d6438da76355de6e595c5b43b81 # v4.1.7
        with:
          ref: ${{ env.commit_sha }}
          fetch-depth: 0

      # Step 3: Set up the Java Development Kit (JDK) environment.
      # Modern Android development requires a specific JDK version (e.g., 17).
      # This action is also pinned to a commit SHA for reproducibility.
      # The 'cache' parameter automatically handles caching of Gradle dependencies, significantly speeding up builds.
      - name: Set up JDK 17
        uses: actions/setup-java@c5195ef43a2533c84698a83a0050e0ba5a20b07e # v4.7.1
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # Step 4: Set up the Android SDK.
      # This action automates the download and configuration of the Android SDK command-line tools,
      # accepts licenses, and adds necessary tools to the system PATH.
      - name: Setup Android SDK
        uses: android-actions/setup-android@9fc6c4e193f4197a202a7a4504afa44a63116960 # v3.2.2

      # Step 5: Decode and install the signing key.
      # The keystore file is base64 encoded and stored as a GitHub secret.
      # This step decodes the secret and writes it to a file on the runner for the signing process.
      # This is a secure method to handle binary secrets in GitHub Actions.
      - name: Decode Keystore
        env:
          SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY_BASE64 }}
        run: |
          echo $SIGNING_KEY_BASE64 | base64 --decode > ${{ github.workspace }}/release.keystore

      # Step 6: Build and sign the Android App Bundle (AAB).
      # This step executes the Gradle wrapper to build the release bundle.
      # Signing information is passed securely via environment variables, which are read by the build.gradle file.
      # These environment variables are populated from GitHub secrets.
      - name: Build and Sign AAB
        run:./gradlew bundleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          SIGNING_KEY_FILE: ${{ github.workspace }}/release.keystore

      # Step 7: Generate a short SHA for artifact naming.
      # A short, 7-character SHA provides a convenient and unique identifier for linking the artifact to the commit.
      - name: Generate Short SHA
        id: short_sha
        run: echo "sha_short=$(echo ${{ env.commit_sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      # Step 8: Upload the signed AAB as a workflow artifact.
      # The artifact is named dynamically with the branch and short commit SHA for clear traceability.
      # Using v4 of upload-artifact is crucial for performance and because v3 is deprecated.
      - name: Upload Signed AAB
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: app-release-${{ github.ref_name }}-${{ steps.short_sha.outputs.sha_short }}.aab
          path: app/build/outputs/bundle/release/app-release.aab
          if-no-files-found: error
          retention-days: 7
          
