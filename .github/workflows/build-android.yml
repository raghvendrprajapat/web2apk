# Workflow ka Naam
name: Build Android (Signed APK & AAB)

# Yeh workflow ko 'Actions' tab se manually run karne ki anumati deta hai
on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name (e.g., My Awesome App)"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      # NEW: App ka version naam, jaise 1.0.1
      VERSION_NAME:
        description: "App Version Name (e.g., 1.0.1)"
        required: true
        default: "1.0.0"
      # NEW: Unique version code. Har naye update ke liye isse 1 badhana hoga (e.g., 1, 2, 3...)
      VERSION_CODE:
        description: "Unique Version Code (integer, e.g., 1)"
        required: true
        default: "1"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Yeh saare secrets aapko GitHub repository settings mein add karne honge
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      MAKE_WEBHOOK_URL: ${{ secrets.MAKE_WEBHOOK_URL }}

    steps:
      # Step 1: Code ko checkout karna
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Java Development Kit (JDK) setup karna
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Node.js setup karna
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 4: Android SDK setup karna
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Step 5: Capacitor dependencies install karna
      - name: Install Capacitor Dependencies
        shell: bash
        run: |
          # Ek basic package.json file banata hai agar मौजूद nahi hai
          if [ ! -f package.json ]; then
          cat > package.json <<'JSON'
          {
            "name": "web2apk-app",
            "version": "1.0.0",
            "private": true
          }
          JSON
          fi
          # Capacitor CLI, Core, aur Android platform install karta hai
          npm i -g @capacitor/cli
          npm i @capacitor/core @capacitor/android --save-exact
          
          # Ek temporary web directory banata hai
          mkdir -p www
          echo '<!doctype html><html><head><meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover"></head><body></body></html>' > www/index.html

      # Step 6: Capacitor config file ko generate aur update karna
      - name: Generate/Update Capacitor Config
        shell: bash
        run: |
          # Yahan hum app ki details capacitor.config.json file mein set kar rahe hain
          # Sabse important hai server.url, jo aapke web app ka URL hai
          npx cap init \
            "${{ github.event.inputs.APP_NAME }}" \
            "${{ github.event.inputs.APP_ID }}" \
            --web-dir "www"
          
          npx cap config set server.url "${{ github.event.inputs.WEB_URL }}"
          npx cap config set server.androidScheme "https"
          npx cap config set android.allowMixedContent true

      # Step 7: Android platform ko add aur sync karna
      - name: Add Android Platform & Sync
        run: |
          npx cap add android
          npx cap sync android
          
      # NEW Step 8: App ka version name aur version code set karna
      # Yeh Play Store par update publish karne ke liye bahut zaroori hai
      - name: Set App Version in Gradle
        shell: bash
        run: |
          VERSION_NAME="${{ github.event.inputs.VERSION_NAME }}"
          VERSION_CODE="${{ github.event.inputs.VERSION_CODE }}"
          GRADLE_FILE="android/app/build.gradle"
          
          echo "Setting versionName to $VERSION_NAME and versionCode to $VERSION_CODE"
          
          # versionName ko update karta hai
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" $GRADLE_FILE
          # versionCode ko update karta hai
          sed -i "s/versionCode .*/versionCode $VERSION_CODE/" $GRADLE_FILE

      # Step 9: Keystore file ko decode karna
      - name: Decode Keystore
        shell: bash
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/release-key.jks

      # Step 10: Android app ko build aur sign karna
      - name: Build Signed App Bundle (AAB) and APK
        working-directory: android
        shell: bash
        run: |
          chmod +x ./gradlew
          
          # Signed AAB (Android App Bundle) banata hai - Yeh Play Store ke liye recommended hai
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$PWD/release-key.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
            
          # Signed APK banata hai - Direct installation aur testing ke liye
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/release-key.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"

      # Step 11: Signed AAB file ko artifact olarak upload karna
      - name: Upload AAB (Play Store Ready)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/*.aab
          if-no-files-found: error
          retention-days: 7

      # Step 12: Signed APK file ko artifact olarak upload karna
      - name: Upload APK (for testing)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error
          retention-days: 7

      # Step 13: Make.com ko callback bhejna (optional)
      - name: Callback to Make.com
        if: always() # Yeh step hamesha chalega, chahe build fail ho ya pass
        shell: bash
        run: |
          URL="${MAKE_WEBHOOK_URL:-${{ github.event.inputs.CALLBACK_URL }}}"
          if [ -n "$URL" ]; then
            RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            STATUS="${{ job.status }}"
            APP_NAME='${{ github.event.inputs.APP_NAME }}'
            PKG_ID='${{ github.event.inputs.APP_ID }}'
            WEB_URL='${{ github.event.inputs.WEB_URL }}'
            VERSION='${{ github.event.inputs.VERSION_NAME }}'
            PAYLOAD=$(printf '{"status":"%s","appName":"%s","packageId":"%s","webUrl":"%s","version":"%s","runUrl":"%s"}' \
              "$STATUS" "$APP_NAME" "$PKG_ID" "$WEB_URL" "$VERSION" "$RUN_URL")
            
            echo "Sending callback to Make.com..."
            curl -sS -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$URL" || true
          else
            echo "No Make.com webhook URL provided. Skipping callback."
          fi
          
