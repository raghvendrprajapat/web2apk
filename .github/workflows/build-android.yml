name: Build Web to Signed Android

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App name"
        required: true
        default: "My Web2App"
      APP_ID:
        description: "Package ID (e.g. com.example.app)"
        required: true
        default: "com.example.web2app"
      WEB_URL:
        description: "Live URL (must be https:// unless you allow http)"
        required: true
        default: "https://example.com"
      VERSION_NAME:
        description: "Public version (e.g. 1.0.0)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Integer. Must increase every Play upload"
        required: true
        default: "1"
      TARGET_SDK:
        description: "Target / compile SDK"
        required: true
        default: "35"
      ALLOW_MIXED_CONTENT:
        description: "Allow http:// content? true/false"
        required: true
        default: "false"
      PLUGINS:
        description: "Extra native plugins to include"
        required: true
        type: choice
        default: "none"
        options:
          - "none"
          - "camera"
          - "push"
          - "location"
          - "all"
      APP_ICON_URL:
        description: "Full URL to icon file OR public folder URL containing icon_xxxhdpi.png etc (optional)"
        required: false
        default: ""
      SPLASH_SCREEN_URL:
        description: "Full URL to splash file OR public folder URL containing splash.png (optional)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    env:
      APP_NAME: ${{ github.event.inputs.APP_NAME }}
      APP_ID: ${{ github.event.inputs.APP_ID }}
      WEB_URL: ${{ github.event.inputs.WEB_URL }}
      VERSION_NAME: ${{ github.event.inputs.VERSION_NAME }}
      VERSION_CODE: ${{ github.event.inputs.VERSION_CODE }}
      TARGET_SDK: ${{ github.event.inputs.TARGET_SDK }}
      MIN_SDK: "22"
      ALLOW_MIXED_CONTENT: ${{ github.event.inputs.ALLOW_MIXED_CONTENT }}
      PLUGINS: ${{ github.event.inputs.PLUGINS }}
      KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Prepare webDir
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
            if npm run | grep -q " build"; then npm run build || true; fi
            for d in dist build public; do
              if [ -d "$d" ]; then echo "WEB_BUILD_DIR=$d" >> $GITHUB_ENV; break; fi
            done
          fi
          if ! grep -q WEB_BUILD_DIR $GITHUB_ENV 2>/dev/null; then
            mkdir -p minimal_www
            printf '<!doctype html><html><body style="font-family:sans-serif;text-align:center;padding-top:2rem;">Loadingâ€¦</body></html>\n' > minimal_www/index.html
            echo "WEB_BUILD_DIR=minimal_www" >> $GITHUB_ENV
          fi
          npm install -D @capacitor/core @capacitor/cli @capacitor/android

      - name: Validate inputs
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! "$APP_ID" =~ ^[a-z]+([a-z0-9_]*)(\.[a-z][a-z0-9_]*)+$ ]]; then
            echo "APP_ID invalid: $APP_ID"; exit 1
          fi
          if ! [[ "$VERSION_CODE" =~ ^[0-9]+$ ]]; then echo "VERSION_CODE must be integer"; exit 1; fi
          if [[ "$ALLOW_MIXED_CONTENT" != "true" && ! "$WEB_URL" =~ ^https:// ]]; then
            echo "WEB_URL must start with https:// (or set ALLOW_MIXED_CONTENT=true)"; exit 1
          fi
          for var in KEYSTORE_BASE64 KEYSTORE_PASSWORD KEY_ALIAS KEY_PASSWORD; do
            if [ -z "${!var:-}" ]; then echo "Missing secret: $var"; exit 1; fi
          done

      - name: Restore keystore
        shell: bash
        run: |
          set -euo pipefail
          echo "$KEYSTORE_BASE64" | base64 -d > android.keystore
          ls -l android.keystore

      - name: Configure Capacitor
        shell: bash
        run: |
          set -euo pipefail
          echo "WEB_BUILD_DIR currently set to: $WEB_BUILD_DIR"
          npx cap init "$APP_NAME" "$APP_ID" --web-dir="$WEB_BUILD_DIR" || true
          printf '{\n' > capacitor.config.json
          printf '  "appId": "%s",\n' "$APP_ID" >> capacitor.config.json
          printf '  "appName": "%s",\n' "$APP_NAME" >> capacitor.config.json
          printf '  "webDir": "%s",\n' "$WEB_BUILD_DIR" >> capacitor.config.json
          printf '  "bundledWebRuntime": false,\n' >> capacitor.config.json
          printf '  "server": {\n' >> capacitor.config.json
          printf '    "url": "%s",\n' "$WEB_URL" >> capacitor.config.json
          if [ "$ALLOW_MIXED_CONTENT" = "true" ]; then printf '    "cleartext": true\n' >> capacitor.config.json; else printf '    "cleartext": false\n' >> capacitor.config.json; fi
          printf '  },\n' >> capacitor.config.json
          printf '  "android": {\n' >> capacitor.config.json
          if [ "$ALLOW_MIXED_CONTENT" = "true" ]; then printf '    "allowMixedContent": true\n' >> capacitor.config.json; else printf '    "allowMixedContent": false\n' >> capacitor.config.json; fi
          printf '  }\n' >> capacitor.config.json
          printf '}\n' >> capacitor.config.json
          if [ "$PLUGINS" = "camera" ]; then npm install @capacitor/camera
          elif [ "$PLUGINS" = "push" ]; then npm install @capacitor/push-notifications
          elif [ "$PLUGINS" = "location" ]; then npm install @capacitor/geolocation
          elif [ "$PLUGINS" = "all" ]; then npm install @capacitor/camera @capacitor/push-notifications @capacitor/geolocation
          fi
          npx cap add android || true
          npx cap sync android

      - name: Apply branding assets from URLs
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail

          ICON_SRC="${{ github.event.inputs.APP_ICON_URL }}"
          SPLASH_SRC="${{ github.event.inputs.SPLASH_SCREEN_URL }}"

          if [ -z "$ICON_SRC" ] && [ -z "$SPLASH_SRC" ]; then
            echo "No branding URLs provided - skipping branding download"; exit 0
          fi

          dl() {
            url="$1"; out="$2"
            echo "Downloading: $url -> $out"
            curl -sfSL "$url" -o "$out" || { echo "curl failed for $url (ignored)"; }
          }

          if [ -n "$ICON_SRC" ]; then
            if [[ "$ICON_SRC" =~ \.png$ ]]; then
              echo "ICON_SRC is direct PNG: $ICON_SRC"
              dl "$ICON_SRC" /tmp/icon_base.png
            else
              case "$ICON_SRC" in */) ;; *) ICON_SRC="$ICON_SRC/";; esac
              echo "ICON_SRC is folder: $ICON_SRC"
              dl "${ICON_SRC}icon_xxxhdpi.png" /tmp/icon_xxxhdpi.png
              dl "${ICON_SRC}icon_xxhdpi.png"  /tmp/icon_xxhdpi.png
              dl "${ICON_SRC}icon_xhdpi.png"   /tmp/icon_xhdpi.png
              dl "${ICON_SRC}icon_hdpi.png"    /tmp/icon_hdpi.png
              dl "${ICON_SRC}icon_mdpi.png"    /tmp/icon_mdpi.png
            fi
          fi

          if [ -n "$SPLASH_SRC" ]; then
            if [[ "$SPLASH_SRC" =~ \.png$ ]]; then
              dl "$SPLASH_SRC" /tmp/splash.png
            else
              case "$SPLASH_SRC" in */) ;; *) SPLASH_SRC="$SPLASH_SRC/";; esac
              dl "${SPLASH_SRC}splash.png" /tmp/splash.png
            fi
          fi

          echo "Cleaning old icon resources..."
          rm -rf app/src/main/res/mipmap-* app/src/main/res/drawable* || true

          echo "Creating resource directories..."
          for density in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p "app/src/main/res/mipmap-${density}"
          done
          mkdir -p app/src/main/res/mipmap-anydpi-v26
          mkdir -p app/src/main/res/drawable
          mkdir -p app/src/main/res/drawable-nodpi

          if [ -f /tmp/icon_base.png ]; then
            echo "Installing base icon to all densities..."
            for density in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
              cp /tmp/icon_base.png "app/src/main/res/mipmap-${density}/ic_launcher.png"
              cp /tmp/icon_base.png "app/src/main/res/mipmap-${density}/ic_launcher_round.png"
            done
          else
            echo "Installing density-specific icons..."
            [ -f /tmp/icon_mdpi.png ]    && cp /tmp/icon_mdpi.png    app/src/main/res/mipmap-mdpi/ic_launcher.png
            [ -f /tmp/icon_hdpi.png ]    && cp /tmp/icon_hdpi.png    app/src/main/res/mipmap-hdpi/ic_launcher.png
            [ -f /tmp/icon_xhdpi.png ]   && cp /tmp/icon_xhdpi.png   app/src/main/res/mipmap-xhdpi/ic_launcher.png
            [ -f /tmp/icon_xxhdpi.png ]  && cp /tmp/icon_xxhdpi.png  app/src/main/res/mipmap-xxhdpi/ic_launcher.png
            [ -f /tmp/icon_xxxhdpi.png ] && cp /tmp/icon_xxxhdpi.png app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
            
            [ -f /tmp/icon_mdpi.png ]    && cp /tmp/icon_mdpi.png    app/src/main/res/mipmap-mdpi/ic_launcher_round.png
            [ -f /tmp/icon_hdpi.png ]    && cp /tmp/icon_hdpi.png    app/src/main/res/mipmap-hdpi/ic_launcher_round.png
            [ -f /tmp/icon_xhdpi.png ]   && cp /tmp/icon_xhdpi.png   app/src/main/res/mipmap-xhdpi/ic_launcher_round.png
            [ -f /tmp/icon_xxhdpi.png ]  && cp /tmp/icon_xxhdpi.png  app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
            [ -f /tmp/icon_xxxhdpi.png ] && cp /tmp/icon_xxxhdpi.png app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
          fi

          ICON_SOURCE=""
          if [ -f /tmp/icon_base.png ]; then
            ICON_SOURCE="/tmp/icon_base.png"
          elif [ -f /tmp/icon_xxxhdpi.png ]; then
            ICON_SOURCE="/tmp/icon_xxxhdpi.png"
          fi

          if [ -n "$ICON_SOURCE" ]; then
            echo "Creating adaptive icon resources..."
            
            for density in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
              cp "$ICON_SOURCE" "app/src/main/res/mipmap-${density}/ic_launcher_foreground.png"
              cp "$ICON_SOURCE" "app/src/main/res/mipmap-${density}/ic_launcher_background.png"
            done

            printf '%s\n' \
              '<?xml version="1.0" encoding="utf-8"?>' \
              '<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">' \
              '    <background android:drawable="@mipmap/ic_launcher_background"/>' \
              '    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>' \
              '</adaptive-icon>' \
              > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml

            printf '%s\n' \
              '<?xml version="1.0" encoding="utf-8"?>' \
              '<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">' \
              '    <background android:drawable="@mipmap/ic_launcher_background"/>' \
              '    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>' \
              '</adaptive-icon>' \
              > app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml

            echo "Adaptive icons created successfully"
          fi

          if [ -f /tmp/splash.png ]; then
            echo "Installing splash screen..."
            cp /tmp/splash.png app/src/main/res/drawable-nodpi/splash.png
            cp /tmp/splash.png app/src/main/res/drawable/splash.png

            printf '%s\n' \
              '<?xml version="1.0" encoding="utf-8"?>' \
              '<layer-list xmlns:android="http://schemas.android.com/apk/res/android">' \
              '    <item android:drawable="@android:color/white" />' \
              '    <item>' \
              '        <bitmap android:gravity="center" android:src="@drawable/splash" />' \
              '    </item>' \
              '</layer-list>' \
              > app/src/main/res/drawable/launch_background.xml

            echo "Splash screen installed"
          fi

          echo ""
          echo "=== BRANDING INSTALLATION SUMMARY ==="
          echo ""
          echo "Downloaded files:"
          ls -lh /tmp/icon_* /tmp/splash.png 2>/dev/null || echo "  (no files found)"
          
          echo ""
          echo "Installed legacy icons:"
          find app/src/main/res/mipmap-* -name "ic_launcher*.png" -type f | head -20
          
          echo ""
          echo "Adaptive icon resources:"
          ls -lh app/src/main/res/mipmap-anydpi-v26/ 2>/dev/null || echo "  (no adaptive icons)"
          
          echo ""
          echo "Adaptive icon XML content:"
          if [ -f app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ]; then
            cat app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
          else
            echo "  ic_launcher.xml not found"
          fi
          
          echo ""
          echo "Splash resources:"
          ls -lh app/src/main/res/drawable*/splash.png 2>/dev/null || echo "  (no splash found)"
          
          echo ""
          echo "Branding installation complete"

      - name: Ensure manifest icon entries
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          MF="app/src/main/AndroidManifest.xml"
          if [ ! -f "$MF" ]; then echo "No AndroidManifest.xml found - skipping manifest patch"; exit 0; fi
          perl -0777 -pe '
            if (/<application\b[^>]*>/s) {
              $app = $&;
              $new = $app;
              if ($new !~ /android:icon=/) { $new =~ s/<application/<application android:icon=\"\@mipmap\/ic_launcher\"/; }
              else { $new =~ s/android:icon=\"[^\"]*\"/android:icon=\"\@mipmap\/ic_launcher\"/g; }
              if ($new !~ /android:roundIcon=/) { $new =~ s/<application/<application android:roundIcon=\"\@mipmap\/ic_launcher_round\"/; }
              else { $new =~ s/android:roundIcon=\"[^\"]*\"/android:roundIcon=\"\@mipmap\/ic_launcher_round\"/g; }
              s/\Q$app\E/$new/;
            }
          ' -i "$MF" || true
          echo "Patched AndroidManifest (first lines):"
          sed -n '1,80p' "$MF" || true

      - name: Patch Gradle
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          cp ../android.keystore app/release.keystore
          if [ -f app/build.gradle ]; then FILE="app/build.gradle"; else FILE="app/build.gradle.kts"; fi
          sed -i -E "s/versionCode[ =]+[0-9]+/versionCode $VERSION_CODE/" "$FILE" || true
          sed -i -E "s/versionName[ =]+\"[^\"]+\"/versionName \"$VERSION_NAME\"/" "$FILE" || true
          sed -i -E "s/minSdkVersion[ =]+[0-9]+/minSdkVersion $MIN_SDK/" "$FILE" || true
          sed -i -E "s/minSdk[ =]+[0-9]+/minSdk $MIN_SDK/" "$FILE" || true
          sed -i -E "s/targetSdkVersion[ =]+[0-9]+/targetSdkVersion $TARGET_SDK/" "$FILE" || true
          sed -i -E "s/targetSdk[ =]+[0-9]+/targetSdk $TARGET_SDK/" "$FILE" || true
          sed -i -E "s/compileSdkVersion[ =]+[0-9]+/compileSdkVersion $TARGET_SDK/" "$FILE" || true
          sed -i -E "s/compileSdk[ =]+[0-9]+/compileSdk $TARGET_SDK/" "$FILE" || true
          if ! grep -q "signingConfigs" "$FILE"; then
            {
              echo ""
              echo "android {"
              echo "    signingConfigs {"
              echo "        release {"
              echo "            storeFile file(\"release.keystore\")"
              echo "            storePassword System.getenv(\"KEYSTORE_PASSWORD\")"
              echo "            keyAlias      System.getenv(\"KEY_ALIAS\")"
              echo "            keyPassword   System.getenv(\"KEY_PASSWORD\")"
              echo "        }"
              echo "    }"
              echo "    buildTypes {"
              echo "        release {"
              echo "            signingConfig signingConfigs.release"
              echo "            minifyEnabled false"
              echo "            shrinkResources false"
              echo "            debuggable false"
              echo "        }"
              echo "    }"
              echo "}"
            } >> "$FILE"
          fi
          if [ "$ALLOW_MIXED_CONTENT" = "true" ]; then
            MF="app/src/main/AndroidManifest.xml"
            if [ -f "$MF" ]; then
              if ! grep -q usesCleartextTraffic "$MF"; then
                sed -i 's/<application /<application android:usesCleartextTraffic="true" /' "$MF"
              fi
            fi
          fi

      - name: Build release
        shell: bash
        working-directory: android
        run: |
          set -euo pipefail
          ./gradlew clean --no-daemon
          ./gradlew :app:bundleRelease :app:assembleRelease --no-daemon

          mkdir -p ../out_aab ../out_apk
          cp app/build/outputs/bundle/release/*.aab ../out_aab/ || true
          cp app/build/outputs/apk/release/*.apk ../out_apk/   || true

          echo "=== AAB files ==="; ls -l ../out_aab || true
          echo "=== APK files ==="; ls -l ../out_apk || true

          if ls ../out_apk/*.apk 1> /dev/null 2>&1; then
            APK=$(ls ../out_apk/*.apk | head -n1)
            echo "Listing contents of $APK (top lines):"
            unzip -l "$APK" | sed -n '1,200p' || true
            unzip -p "$APK" "res/mipmap-anydpi-v26/ic_launcher.xml" 2>/dev/null | sed -n '1,200p' || true
            unzip -p "$APK" "res/drawable/launch_background.xml" 2>/dev/null | sed -n '1,200p' || true
          fi

      - name: Upload signed AAB
        uses: actions/upload-artifact@v4
        with:
          name: signed-aab
          path: out_aab

      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: signed-apk
          path: out_apk
