name: Build Android (Signed APK & AAB)

# Yah workflow ko 'Actions' tab se manually (haath se) chalaane ki anumati deta hai
on:
  workflow_dispatch:
    # Ye inputs "Run workflow" button par click karne par ek form banate hain
    inputs:
      APP_NAME:
        description: "App Name (e.g., My Awesome App)"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      PLUGINS:
        description: "Select which Capacitor plugins to install"
        type: choice
        required: true
        default: 'none'
        options:
          - none
          - camera
          - push-notifications
          - all
      VERSION_NAME:
        description: "App Version Name (e.g., 1.0.1)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Unique Version Code (integer, e.g., 1)"
        required: true
        default: "1"
      ALLOW_HTTP:
        description: "Allow http (non-https) content? (For development ONLY)"
        type: boolean
        required: true
        default: false
      TARGET_SDK:
        description: "Target SDK (Play Store rule: 34+)"
        required: true
        default: "34"
      COMPILE_SDK:
        description: "Compile SDK (Typically same as Target)"
        required: true
        default: "34"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # npm dependencies ke liye caching saksham karein

      - name: Install Dependencies with npm ci
        run: npm ci # 'npm install' se tez aur vishvasaneey

      - name: Setup Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Capacitor Core Dependencies
        run: npm i @capacitor/core @capacitor/android --save-exact

      - name: Install Selected Capacitor Plugins
        run: |
          PLUGINS_TO_INSTALL=""
          CHOICE="${{ github.event.inputs.PLUGINS }}"
          if [ "$CHOICE" = "camera" ]; then
            PLUGINS_TO_INSTALL="@capacitor/camera"
          elif [ "$CHOICE" = "push-notifications" ]; then
            PLUGINS_TO_INSTALL="@capacitor/push-notifications"
          elif [ "$CHOICE" = "all" ]; then
            PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications"
          fi

          if; then
            echo "Installing selected plugins: $PLUGINS_TO_INSTALL"
            npm i $PLUGINS_TO_INSTALL --save-exact
          else
            echo "No extra plugins selected."
          fi

      - name: Generate Capacitor Config
        run: |
          # capacitor.config.json file ko inputs se dynamically banata hai
          echo '{' > capacitor.config.json
          echo '  "appId": "${{ github.event.inputs.APP_ID }}",' >> capacitor.config.json
          echo '  "appName": "${{ github.event.inputs.APP_NAME }}",' >> capacitor.config.json
          echo '  "webDir": "www",' >> capacitor.config.json
          if; then
            echo '  "server": { "androidScheme": "http", "cleartext": true },' >> capacitor.config.json
            echo '  "android": { "allowMixedContent": true }' >> capacitor.config.json
          else
            echo '  "server": { "androidScheme": "https", "url": "${{ github.event.inputs.WEB_URL }}" }' >> capacitor.config.json
          fi
          echo '}' >> capacitor.config.json
          
          # Ek dummy web directory banata hai
          mkdir -p www
          echo "<html><body></body></html>" > www/index.html

      - name: Initialize Capacitor and Sync Android
        run: |
          npx cap add android
          npx cap sync android

      - name: Update Android Project Versions
        run: |
          GRADLE_FILE="android/app/build.gradle"
          # Version Name aur Code set karta hai
          sed -i 's/versionName ".*"/versionName "${{ github.event.inputs.VERSION_NAME }}"/' $GRADLE_FILE
          sed -i 's/versionCode.*/versionCode ${{ github.event.inputs.VERSION_CODE }}/' $GRADLE_FILE
          # Compile aur Target SDK set karta hai
          sed -i 's/compileSdkVersion.*/compileSdkVersion ${{ github.event.inputs.COMPILE_SDK }}/' $GRADLE_FILE
          sed -i 's/targetSdkVersion.*/targetSdkVersion ${{ github.event.inputs.TARGET_SDK }}/' $GRADLE_FILE

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-key.jks

      - name: Build Signed App Bundle (AAB) and APK
        working-directory: android
        run: |
          chmod +x./gradlew
          # AAB (Play Store ke liye) banayein
         ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$PWD/app/release-key.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"
          
          # APK (testing ke liye) banayein
         ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/app/release-key.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"

      - name: Clean up Keystore
        if: always() # Yah hamesha chalega, bhale hi build fail ho jaaye
        run: rm -f android/app/release-key.jks

      - name: Upload AAB (Play Store Ready)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/*.aab

      - name: Upload APK (for testing)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/*.apk
