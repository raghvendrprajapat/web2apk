# build-and-release.yml (Optimized and Secure)
name: Build and Release Android AAB

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

# Enforce the principle of least privilege by setting default permissions to none.
permissions:
  contents: read

jobs:
  build_and_sign:
    name: Build and Sign AAB
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code using a pinned commit SHA for security.
      - name: Checkout repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # Pinned to a specific commit

      # Step 2: Set up JDK 17, required for modern Android builds.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Set up Node.js for JavaScript-based tooling (e.g., Capacitor/React Native).
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 4: Cache Node.js dependencies for faster builds.
      # The cache is invalidated only when package-lock.json changes.
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 5: Install dependencies using 'npm ci' for deterministic and fast installs.
      - name: Install dependencies
        run: npm ci

      # Step 6: Cache Gradle dependencies to significantly speed up build times.
      # The cache key includes hashes of build files to ensure it's updated when dependencies change.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 7: Decode the keystore from a Base64 secret into a file on the runner.
      # This avoids storing the sensitive keystore file in the repository.
      - name: Decode Keystore
        env:
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        run: |
          echo "Decoding keystore..."
          echo $RELEASE_KEYSTORE_BASE64 | base64 --decode >./android/app/release.keystore
          echo "Keystore decoded successfully."

      # Step 8: Make the Gradle wrapper executable.
      - name: Make gradlew executable
        run: chmod +x./android/gradlew

      # Step 9: Build and sign the AAB using Gradle.
      # Secrets are passed as environment variables, which is more secure than command-line arguments.
      # Gradle reads these variables to configure the signing process.
      - name: Build and Sign Release AAB
        working-directory:./android
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run:./gradlew bundleRelease

      # Step 10: Clean up the decoded keystore file immediately after use.
      - name: Clean up Keystore
        if: always() # This step runs even if the build fails, ensuring cleanup.
        run: rm -f./android/app/release.keystore

      # Step 11: Upload the signed AAB as a build artifact.
      # This allows it to be downloaded for manual testing or deployment.
      - name: Upload Signed AAB
        uses: actions/upload-artifact@v4
        with:
          name: signed-release-aab
          path:./android/app/build/outputs/bundle/release/app-release.aab
