name: Build Android (Signed APK & AAB)

on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ----- Project & Capacitor deps -----
      - name: Ensure Node project & Capacitor deps
        run: |
          if [ ! -f package.json ]; then npm init -y; fi
          npm i @capacitor/core @capacitor/cli @capacitor/android
          mkdir -p dist
          echo "<!doctype html><meta charset='utf-8'><title>Web2APK</title><body>Web2APK</body>" > dist/index.html

      # ----- Capacitor config -----
      - name: Initialize/Update Capacitor config
        run: |
          node -e "
            const fs=require('fs');
            const cfg={
              appId: '${{ github.event.inputs.APP_ID }}',
              appName: '${{ github.event.inputs.APP_NAME }}',
              webDir: 'dist',
              server: { url: '${{ github.event.inputs.WEB_URL }}', androidScheme: 'https', cleartext: false },
              android: { allowMixedContent: true }
            };
            fs.writeFileSync('capacitor.config.json', JSON.stringify(cfg,null,2));
          "
          npx cap add android || true
          npx cap sync android

      # ----- Decode keystore from secret -----
      - name: Decode keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > android/my-release-key.jks

      # ----- Build (signed) -----
      - name: Build (release, signed)
        working-directory: android
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          ./gradlew clean
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=my-release-key.jks \
            -Pandroid.injected.signing.store.password="${KEYSTORE_PASSWORD}" \
            -Pandroid.injected.signing.key.alias="${KEY_ALIAS}" \
            -Pandroid.injected.signing.key.password="${KEY_PASSWORD}"
          ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=my-release-key.jks \
            -Pandroid.injected.signing.store.password="${KEYSTORE_PASSWORD}" \
            -Pandroid.injected.signing.key.alias="${KEY_ALIAS}" \
            -Pandroid.injected.signing.key.password="${KEY_PASSWORD}"

      # ----- Upload outputs -----
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: |
            android/app/build/outputs/apk/release/*.apk
            android/app/build/outputs/bundle/release/*.aab

      # ----- Optional: callback to Make.com -----
      - name: Callback to Make.com
        if: ${{ inputs.CALLBACK_URL != '' }}
        run: |
          echo "Sending callback to Make.com..."
          curl -X POST -H "Content-Type: application/json" \
            -d '{"repo":"${{ github.repository }}","run_id":"${{ github.run_id }}"}' \
            "${{ github.event.inputs.CALLBACK_URL }}"
