# Updated Production-Ready Android Build Workflow
# Compliant with Google Play Store 2025 Requirements

name: Build Android (Signed APK & AAB) - Production Ready

# Manual trigger with comprehensive input validation
on:
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: "App Name (e.g., My Awesome App)"
        required: true
        default: "My Web2APK"
      APP_ID:
        description: "Package ID (e.g., com.example.app)"
        required: true
        default: "com.example.web2apk"
      WEB_URL:
        description: "Web App URL (https://...)"
        required: true
        default: "https://example.com"
      PLUGINS:
        description: "Select which Capacitor plugins to install"
        type: choice
        required: true
        default: 'none'
        options:
        - none
        - camera
        - push-notifications
        - location
        - camera_and_push
        - all
      VERSION_NAME:
        description: "App Version Name (e.g., 1.0.1)"
        required: true
        default: "1.0.0"
      VERSION_CODE:
        description: "Unique Version Code (integer, e.g., 1)"
        required: true
        default: "1"
      CALLBACK_URL:
        description: "Make.com callback webhook URL (optional)"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent hanging builds
    
    env:
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      MAKE_WEBHOOK_URL: ${{ secrets.MAKE_WEBHOOK_URL }}

    steps:    
      - name: Checkout Repository    
        uses: actions/checkout@v4

      # CRITICAL FIX: Updated to Java 17 (minimum for Android API 35)
      - name: Setup Java 17    
        uses: actions/setup-java@v4    
        with:    
          distribution: 'temurin'    
          java-version: '17'
          cache: 'gradle'

      - name: Setup Node 20    
        uses: actions/setup-node@v4    
        with:    
          node-version: '20'
          cache: 'npm'

      - name: Setup Android SDK with API 35    
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          build-tools: 35.0.0
          cmake: 3.22.1

      # ENHANCED: Better error handling and validation
      - name: Install Capacitor Dependencies and Plugins    
        shell: bash    
        run: |    
          set -e  # Exit on any error
          
          # Validate inputs
          if [[ ! "${{ github.event.inputs.WEB_URL }}" =~ ^https?:// ]]; then
            echo "Error: WEB_URL must be a valid HTTP/HTTPS URL"
            exit 1
          fi
          
          if [ ! -f package.json ]; then    
            cat > package.json <<'JSON'    
            {    
              "name": "web2apk-app",    
              "version": "1.0.0",    
              "private": true    
            }    
            JSON    
          fi
          
          # Install Capacitor with exact versions for stability
          npm i -g @capacitor/cli@latest
          npm i @capacitor/core@latest @capacitor/android@latest --save-exact
              
          # Plugin installation with validation
          PLUGINS_TO_INSTALL=""    
          CHOICE="${{ github.event.inputs.PLUGINS }}"

          case "$CHOICE" in
            "camera")
              PLUGINS_TO_INSTALL="@capacitor/camera"
              ;;
            "push-notifications")
              PLUGINS_TO_INSTALL="@capacitor/push-notifications"
              ;;
            "location")
              PLUGINS_TO_INSTALL="@capacitor/geolocation"
              ;;
            "camera_and_push")
              PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications"
              ;;
            "all")
              PLUGINS_TO_INSTALL="@capacitor/camera @capacitor/push-notifications @capacitor/geolocation"
              ;;
            "none"|*)
              echo "No additional plugins selected"
              ;;
          esac

          if [ -n "$PLUGINS_TO_INSTALL" ]; then    
            echo "Installing selected plugins: $PLUGINS_TO_INSTALL"    
            npm i $PLUGINS_TO_INSTALL --save-exact || {
              echo "Failed to install plugins: $PLUGINS_TO_INSTALL"
              exit 1
            }
          fi
              
          # Create minimal www directory
          mkdir -p www    
          cat > www/index.html <<'HTML'
          <!doctype html>
          <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
            <title>${{ github.event.inputs.APP_NAME }}</title>
          </head>
          <body>
            <div id="app">Loading...</div>
          </body>
          </html>
          HTML

      # CRITICAL FIX: Proper Capacitor configuration with HTTPS validation
      - name: Generate/Update Capacitor Config    
        shell: bash    
        run: |
          set -e
          
          # Initialize Capacitor project
          npx cap init \    
            "${{ github.event.inputs.APP_NAME }}" \    
            "${{ github.event.inputs.APP_ID }}" \    
            --web-dir "www"
            
          # FIXED: Secure server configuration
          WEB_URL="${{ github.event.inputs.WEB_URL }}"
          
          # Validate HTTPS for production
          if [[ "$WEB_URL" =~ ^https:// ]]; then
            echo "Configuring for HTTPS URL: $WEB_URL"
            npx cap config set server.url "$WEB_URL"
            npx cap config set server.androidScheme "https"
            npx cap config set android.allowMixedContent false
          else
            echo "Warning: HTTP URLs are not recommended for production"
            npx cap config set server.url "$WEB_URL"
            npx cap config set server.androidScheme "http"
            npx cap config set android.allowMixedContent true
          fi

      - name: Add Android Platform & Sync    
        run: |
          set -e
          npx cap add android || {
            echo "Failed to add Android platform"
            exit 1
          }
          npx cap sync android || {
            echo "Failed to sync Android platform"
            exit 1
          }

      # CRITICAL FIX: Set mandatory API level 35 compliance
      - name: Configure Android API 35 Compliance
        shell: bash
        run: |
          set -e
          
          VERSION_NAME="${{ github.event.inputs.VERSION_NAME }}"    
          VERSION_CODE="${{ github.event.inputs.VERSION_CODE }}"    
          GRADLE_FILE="android/app/build.gradle"
          
          # Ensure gradle file exists
          if [ ! -f "$GRADLE_FILE" ]; then
            echo "Error: $GRADLE_FILE not found"
            exit 1
          fi
          
          # MANDATORY: Set API 35 compliance
          sed -i "s/compileSdk .*/compileSdk 35/" $GRADLE_FILE
          sed -i "s/targetSdk .*/targetSdk 35/" $GRADLE_FILE || sed -i "s/targetSdkVersion .*/targetSdkVersion 35/" $GRADLE_FILE
          
          # Set version information
          sed -i "s/versionName \".*\"/versionName \"$VERSION_NAME\"/" $GRADLE_FILE    
          sed -i "s/versionCode .*/versionCode $VERSION_CODE/" $GRADLE_FILE
          
          # Verify critical settings
          echo "Verifying Android configuration..."
          grep -E "(compileSdk|targetSdk)" $GRADLE_FILE || {
            echo "Error: Failed to set required SDK versions"
            exit 1
          }

      # ENHANCED: Secure keystore handling
      - name: Setup Signing Configuration
        shell: bash    
        run: |
          set -e
          
          # Validate keystore secrets
          if [ -z "$KEYSTORE_BASE64" ] || [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_ALIAS" ] || [ -z "$KEY_PASSWORD" ]; then
            echo "Error: Missing required keystore secrets"
            exit 1
          fi
          
          # Securely decode and validate keystore
          echo "$KEYSTORE_BASE64" | base64 -d > android/release-key.jks || {
            echo "Error: Failed to decode keystore"
            exit 1
          }
          
          # Verify keystore validity
          keytool -list -keystore android/release-key.jks -storepass "$KEYSTORE_PASSWORD" -alias "$KEY_ALIAS" >/dev/null 2>&1 || {
            echo "Error: Invalid keystore or credentials"
            exit 1
          }
          
          echo "Keystore validation successful"

      # ENHANCED: Robust build process with better error handling
      - name: Build Signed App Bundle (AAB) and APK    
        working-directory: android    
        shell: bash    
        run: |
          set -e
          
          chmod +x ./gradlew
          
          # Clean previous builds
          ./gradlew clean
          
          echo "Building signed AAB for Play Store..."
          ./gradlew bundleRelease \    
            -Pandroid.injected.signing.store.file=$PWD/release-key.jks \    
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \    
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \    
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD" || {
            echo "Error: AAB build failed"
            exit 1
          }
          
          echo "Building signed APK for testing..."
          ./gradlew assembleRelease \    
            -Pandroid.injected.signing.store.file=$PWD/release-key.jks \    
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \    
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \    
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD" || {
            echo "Error: APK build failed"
            exit 1
          }
          
          # Verify build outputs exist
          if [ ! -f "app/build/outputs/bundle/release/"*.aab ]; then
            echo "Error: AAB file not generated"
            exit 1
          fi
          
          if [ ! -f "app/build/outputs/apk/release/"*.apk ]; then
            echo "Error: APK file not generated"
            exit 1
          fi
          
          echo "Build completed successfully"

      # ENHANCED: Secure cleanup
      - name: Cleanup Sensitive Files
        if: always()
        shell: bash
        run: |
          # Remove keystore file
          rm -f android/release-key.jks
          echo "Cleanup completed"

      # ENHANCED: Comprehensive artifact upload
      - name: Upload AAB (Play Store Ready)    
        uses: actions/upload-artifact@v4    
        with:    
          name: ${{ github.event.inputs.APP_NAME }}-v${{ github.event.inputs.VERSION_NAME }}-aab
          path: android/app/build/outputs/bundle/release/*.aab    
          if-no-files-found: error    
          retention-days: 30
          compression-level: 6

      - name: Upload APK (Testing)    
        uses: actions/upload-artifact@v4    
        with:    
          name: ${{ github.event.inputs.APP_NAME }}-v${{ github.event.inputs.VERSION_NAME }}-apk
          path: android/app/build/outputs/apk/release/*.apk    
          if-no-files-found: error    
          retention-days: 30
          compression-level: 6

      # ENHANCED: Build summary and callback
      - name: Generate Build Summary
        if: success()
        shell: bash
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **App Name:** ${{ github.event.inputs.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Package ID:** ${{ github.event.inputs.APP_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.VERSION_NAME }} (${{ github.event.inputs.VERSION_CODE }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Target SDK:** 35 (Android 15)" >> $GITHUB_STEP_SUMMARY
          echo "- **Plugins:** ${{ github.event.inputs.PLUGINS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Build Successful" >> $GITHUB_STEP_SUMMARY
          
          # Get file sizes
          AAB_SIZE=$(ls -lh android/app/build/outputs/bundle/release/*.aab | awk '{print $5}')
          APK_SIZE=$(ls -lh android/app/build/outputs/apk/release/*.apk | awk '{print $5}')
          echo "- **AAB Size:** $AAB_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Size:** $APK_SIZE" >> $GITHUB_STEP_SUMMARY

      # OPTIONAL: Webhook callback for automation
      - name: Send Webhook Notification
        if: success() && github.event.inputs.CALLBACK_URL != ''
        shell: bash
        run: |
          curl -X POST "${{ github.event.inputs.CALLBACK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "status": "success",
            "app_name": "${{ github.event.inputs.APP_NAME }}",
            "version": "${{ github.event.inputs.VERSION_NAME }}",
            "build_number": "${{ github.run_number }}",
            "artifacts": [
              "${{ github.event.inputs.APP_NAME }}-v${{ github.event.inputs.VERSION_NAME }}-aab",
              "${{ github.event.inputs.APP_NAME }}-v${{ github.event.inputs.VERSION_NAME }}-apk"
            ]
          }' || echo "Webhook notification failed (non-critical)"